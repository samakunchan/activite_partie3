import * as AST from './types/nodes';
function buildMustache(path, params, hash, raw, loc) {
    if (!AST.isLiteral(path)) {
        path = buildPath(path);
    }
    return {
        type: "MustacheStatement",
        path: path,
        params: params || [],
        hash: hash || buildHash([]),
        escaped: !raw,
        loc: buildLoc(loc || null)
    };
}
function buildBlock(path, params, hash, program, inverse, loc) {
    return {
        type: "BlockStatement",
        path: buildPath(path),
        params: params || [],
        hash: hash || buildHash([]),
        program: program || null,
        inverse: inverse || null,
        loc: buildLoc(loc || null)
    };
}
function buildElementModifier(path, params, hash, loc) {
    return {
        type: "ElementModifierStatement",
        path: buildPath(path),
        params: params || [],
        hash: hash || buildHash([]),
        loc: buildLoc(loc || null)
    };
}
function buildPartial(name, params, hash, indent, loc) {
    return {
        type: "PartialStatement",
        name: name,
        params: params || [],
        hash: hash || buildHash([]),
        indent: indent || '',
        strip: { open: false, close: false },
        loc: buildLoc(loc || null)
    };
}
function buildComment(value, loc) {
    return {
        type: "CommentStatement",
        value: value,
        loc: buildLoc(loc || null)
    };
}
function buildMustacheComment(value, loc) {
    return {
        type: "MustacheCommentStatement",
        value: value,
        loc: buildLoc(loc || null)
    };
}
function buildConcat(parts, loc) {
    return {
        type: "ConcatStatement",
        parts: parts || [],
        loc: buildLoc(loc || null)
    };
}
function buildElement(tag, attributes, modifiers, children, comments, loc) {
    // this is used for backwards compat prior to `comments` being added to the AST
    if (!Array.isArray(comments)) {
        loc = comments;
        comments = [];
    }
    return {
        type: "ElementNode",
        tag: tag || "",
        attributes: attributes || [],
        blockParams: [],
        modifiers: modifiers || [],
        comments: comments || [],
        children: children || [],
        loc: buildLoc(loc || null)
    };
}
function buildAttr(name, value, loc) {
    return {
        type: "AttrNode",
        name: name,
        value: value,
        loc: buildLoc(loc || null)
    };
}
function buildText(chars, loc) {
    return {
        type: "TextNode",
        chars: chars || "",
        loc: buildLoc(loc || null)
    };
}
// Expressions
function buildSexpr(path, params, hash, loc) {
    return {
        type: "SubExpression",
        path: buildPath(path),
        params: params || [],
        hash: hash || buildHash([]),
        loc: buildLoc(loc || null)
    };
}
function buildPath(original, loc) {
    if (typeof original !== 'string') return original;
    var parts = original.split('.');
    var thisHead = false;
    if (parts[0] === 'this') {
        thisHead = true;
        parts = parts.slice(1);
    }
    return {
        type: "PathExpression",
        original: original,
        this: thisHead,
        parts: parts,
        data: false,
        loc: buildLoc(loc || null)
    };
}
function buildLiteral(type, value, loc) {
    return {
        type: type,
        value: value,
        original: value,
        loc: buildLoc(loc || null)
    };
}
// Miscellaneous
function buildHash(pairs, loc) {
    return {
        type: "Hash",
        pairs: pairs || [],
        loc: buildLoc(loc || null)
    };
}
function buildPair(key, value, loc) {
    return {
        type: "HashPair",
        key: key,
        value: value,
        loc: buildLoc(loc || null)
    };
}
function buildProgram(body, blockParams, loc) {
    return {
        type: "Program",
        body: body || [],
        blockParams: blockParams || [],
        loc: buildLoc(loc || null)
    };
}
function buildSource(source) {
    return source || null;
}
function buildPosition(line, column) {
    return {
        line: line,
        column: column
    };
}
export var SYNTHETIC = { source: '(synthetic)', start: { line: 1, column: 0 }, end: { line: 1, column: 0 } };
function buildLoc() {
    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
        args[_key] = arguments[_key];
    }

    if (args.length === 1) {
        var loc = args[0];
        if (loc && typeof loc === 'object') {
            return {
                source: buildSource(loc.source),
                start: buildPosition(loc.start.line, loc.start.column),
                end: buildPosition(loc.end.line, loc.end.column)
            };
        } else {
            return SYNTHETIC;
        }
    } else {
        var startLine = args[0],
            startColumn = args[1],
            endLine = args[2],
            endColumn = args[3],
            source = args[4];

        return {
            source: buildSource(source),
            start: buildPosition(startLine, startColumn),
            end: buildPosition(endLine, endColumn)
        };
    }
}
export default {
    mustache: buildMustache,
    block: buildBlock,
    partial: buildPartial,
    comment: buildComment,
    mustacheComment: buildMustacheComment,
    element: buildElement,
    elementModifier: buildElementModifier,
    attr: buildAttr,
    text: buildText,
    sexpr: buildSexpr,
    path: buildPath,
    concat: buildConcat,
    hash: buildHash,
    pair: buildPair,
    literal: buildLiteral,
    program: buildProgram,
    loc: buildLoc,
    pos: buildPosition,
    string: literal('StringLiteral'),
    boolean: literal('BooleanLiteral'),
    number: literal('NumberLiteral'),
    undefined: function (_undefined) {
        function undefined() {
            return _undefined.apply(this, arguments);
        }

        undefined.toString = function () {
            return _undefined.toString();
        };

        return undefined;
    }(function () {
        return buildLiteral('UndefinedLiteral', undefined);
    }),
    null: function _null() {
        return buildLiteral('NullLiteral', null);
    }
};
function literal(type) {
    return function (value) {
        return buildLiteral(type, value);
    };
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYnVpbGRlcnMuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi9wYWNrYWdlcy9AZ2xpbW1lci9zeW50YXgvbGliL2J1aWxkZXJzLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sS0FBSyxBQUFHLFNBQU0sQUFBZSxBQUFDO0FBT3JDLHVCQUF1QixBQUErQixNQUFFLEFBQXlCLFFBQUUsQUFBZSxNQUFFLEFBQWEsS0FBRSxBQUF3QixLQUN6SSxBQUFFLEFBQUM7UUFBQyxDQUFDLEFBQUcsSUFBQyxBQUFTLFVBQUMsQUFBSSxBQUFDLEFBQUMsT0FBQyxBQUFDLEFBQ3pCLEFBQUk7ZUFBRyxBQUFTLFVBQUMsQUFBSSxBQUFDLEFBQUMsQUFDekIsQUFBQztBQUVELEFBQU07O2NBQ0UsQUFBbUIsQUFDekIsQUFBSTtBQUNKLEFBQU07Z0JBQUUsQUFBTSxVQUFJLEFBQUUsQUFDcEIsQUFBSTtjQUFFLEFBQUksUUFBSSxBQUFTLFVBQUMsQUFBRSxBQUFDLEFBQzNCLEFBQU87aUJBQUUsQ0FBQyxBQUFHLEFBQ2IsQUFBRzthQUFFLEFBQVEsU0FBQyxBQUFHLE9BTlosQUFNZ0IsQUFBSSxBQUFDLEFBQzNCLEFBQUMsQUFDSixBQUFDO0FBUEcsQUFBSTs7QUFTUixvQkFBb0IsQUFBaUIsTUFBRSxBQUFnQyxRQUFFLEFBQXNCLE1BQUUsQUFBb0IsU0FBRSxBQUE2QixTQUFFLEFBQXdCLEtBQzVLLEFBQU07O2NBQ0UsQUFBZ0IsQUFDdEIsQUFBSTtjQUFFLEFBQVMsVUFBQyxBQUFJLEFBQUMsQUFDckIsQUFBTTtnQkFBRSxBQUFNLFVBQUksQUFBRSxBQUNwQixBQUFJO2NBQUUsQUFBSSxRQUFJLEFBQVMsVUFBQyxBQUFFLEFBQUMsQUFDM0IsQUFBTztpQkFBRSxBQUFPLFdBQUksQUFBSSxBQUN4QixBQUFPO2lCQUFFLEFBQU8sV0FBSSxBQUFJLEFBQ3hCLEFBQUc7YUFBRSxBQUFRLFNBQUMsQUFBRyxPQVBaLEFBT2dCLEFBQUks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QUFDLEFBQUMsQUFDbkMsQUFBQyxBQUFDLEFBQ0o7QUFBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCAqIGFzIEFTVCBmcm9tICcuL3R5cGVzL25vZGVzJztcbmltcG9ydCB7IE9wdGlvbiB9IGZyb20gJ0BnbGltbWVyL2ludGVyZmFjZXMnO1xuXG4vLyBTdGF0ZW1lbnRzXG5cbmV4cG9ydCB0eXBlIEJ1aWxkZXJQYXRoID0gc3RyaW5nIHwgQVNULlBhdGhFeHByZXNzaW9uO1xuXG5mdW5jdGlvbiBidWlsZE11c3RhY2hlKHBhdGg6IEJ1aWxkZXJQYXRoIHwgQVNULkxpdGVyYWwsIHBhcmFtcz86IEFTVC5FeHByZXNzaW9uW10sIGhhc2g/OiBBU1QuSGFzaCwgcmF3PzogYm9vbGVhbiwgbG9jPzogQVNULlNvdXJjZUxvY2F0aW9uKTogQVNULk11c3RhY2hlU3RhdGVtZW50IHtcbiAgaWYgKCFBU1QuaXNMaXRlcmFsKHBhdGgpKSB7XG4gICAgcGF0aCA9IGJ1aWxkUGF0aChwYXRoKTtcbiAgfVxuXG4gIHJldHVybiB7XG4gICAgdHlwZTogXCJNdXN0YWNoZVN0YXRlbWVudFwiLFxuICAgIHBhdGgsXG4gICAgcGFyYW1zOiBwYXJhbXMgfHwgW10sXG4gICAgaGFzaDogaGFzaCB8fCBidWlsZEhhc2goW10pLFxuICAgIGVzY2FwZWQ6ICFyYXcsXG4gICAgbG9jOiBidWlsZExvYyhsb2MgfHwgbnVsbClcbiAgfTtcbn1cblxuZnVuY3Rpb24gYnVpbGRCbG9jayhwYXRoOiBCdWlsZGVyUGF0aCwgcGFyYW1zOiBPcHRpb248QVNULkV4cHJlc3Npb25bXT4sIGhhc2g6IE9wdGlvbjxBU1QuSGFzaD4sIHByb2dyYW06IEFTVC5Qcm9ncmFtLCBpbnZlcnNlPzogT3B0aW9uPEFTVC5Qcm9ncmFtPiwgbG9jPzogQVNULlNvdXJjZUxvY2F0aW9uKTogQVNULkJsb2NrU3RhdGVtZW50IHtcbiAgcmV0dXJuIHtcbiAgICB0eXBlOiBcIkJsb2NrU3RhdGVtZW50XCIsXG4gICAgcGF0aDogYnVpbGRQYXRoKHBhdGgpLFxuICAgIHBhcmFtczogcGFyYW1zIHx8IFtdLFxuICAgIGhhc2g6IGhhc2ggfHwgYnVpbGRIYXNoKFtdKSxcbiAgICBwcm9ncmFtOiBwcm9ncmFtIHx8IG51bGwsXG4gICAgaW52ZXJzZTogaW52ZXJzZSB8fCBudWxsLFxuICAgIGxvYzogYnVpbGRMb2MobG9jIHx8IG51bGwpXG4gIH07XG59XG5cbmZ1bmN0aW9uIGJ1aWxkRWxlbWVudE1vZGlmaWVyKHBhdGg6IEJ1aWxkZXJQYXRoLCBwYXJhbXM/OiBBU1QuRXhwcmVzc2lvbltdLCBoYXNoPzogQVNULkhhc2gsIGxvYz86IE9wdGlvbjxBU1QuU291cmNlTG9jYXRpb24+KTogQVNULkVsZW1lbnRNb2RpZmllclN0YXRlbWVudCB7XG4gIHJldHVybiB7XG4gICAgdHlwZTogXCJFbGVtZW50TW9kaWZpZXJTdGF0ZW1lbnRcIixcbiAgICBwYXRoOiBidWlsZFBhdGgocGF0aCksXG4gICAgcGFyYW1zOiBwYXJhbXMgfHwgW10sXG4gICAgaGFzaDogaGFzaCB8fCBidWlsZEhhc2goW10pLFxuICAgIGxvYzogYnVpbGRMb2MobG9jIHx8IG51bGwpXG4gIH07XG59XG5cbmZ1bmN0aW9uIGJ1aWxkUGFydGlhbChuYW1lOiBBU1QuUGF0aEV4cHJlc3Npb24sIHBhcmFtcz86IEFTVC5FeHByZXNzaW9uW10sIGhhc2g/OiBBU1QuSGFzaCwgaW5kZW50Pzogc3RyaW5nLCBsb2M/OiBBU1QuU291cmNlTG9jYXRpb24pOiBBU1QuUGFydGlhbFN0YXRlbWVudCB7XG4gIHJldHVybiB7XG4gICAgdHlwZTogXCJQYXJ0aWFsU3RhdGVtZW50XCIsXG4gICAgbmFtZTogbmFtZSxcbiAgICBwYXJhbXM6IHBhcmFtcyB8fCBbXSxcbiAgICBoYXNoOiBoYXNoIHx8IGJ1aWxkSGFzaChbXSksXG4gICAgaW5kZW50OiBpbmRlbnQgfHwgJycsXG4gICAgc3RyaXA6IHsgb3BlbjogZmFsc2UsIGNsb3NlOiBmYWxzZSB9LFxuICAgIGxvYzogYnVpbGRMb2MobG9jIHx8IG51bGwpXG4gIH07XG59XG5cbmZ1bmN0aW9uIGJ1aWxkQ29tbWVudCh2YWx1ZTogc3RyaW5nLCBsb2M/OiBBU1QuU291cmNlTG9jYXRpb24pOiBBU1QuQ29tbWVudFN0YXRlbWVudCB7XG4gIHJldHVybiB7XG4gICAgdHlwZTogXCJDb21tZW50U3RhdGVtZW50XCIsXG4gICAgdmFsdWU6IHZhbHVlLFxuICAgIGxvYzogYnVpbGRMb2MobG9jIHx8IG51bGwpXG4gIH07XG59XG5cbmZ1bmN0aW9uIGJ1aWxkTXVzdGFjaGVDb21tZW50KHZhbHVlOiBzdHJpbmcsIGxvYz86IEFTVC5Tb3VyY2VMb2NhdGlvbik6IEFTVC5NdXN0YWNoZUNvbW1lbnRTdGF0ZW1lbnQge1xuICByZXR1cm4ge1xuICAgIHR5cGU6IFwiTXVzdGFjaGVDb21tZW50U3RhdGVtZW50XCIsXG4gICAgdmFsdWU6IHZhbHVlLFxuICAgIGxvYzogYnVpbGRMb2MobG9jIHx8IG51bGwpXG4gIH07XG59XG5cbmZ1bmN0aW9uIGJ1aWxkQ29uY2F0KHBhcnRzOiAoQVNULlRleHROb2RlIHwgQVNULk11c3RhY2hlU3RhdGVtZW50KVtdLCBsb2M/OiBBU1QuU291cmNlTG9jYXRpb24pOiBBU1QuQ29uY2F0U3RhdGVtZW50IHtcbiAgcmV0dXJuIHtcbiAgICB0eXBlOiBcIkNvbmNhdFN0YXRlbWVudFwiLFxuICAgIHBhcnRzOiBwYXJ0cyB8fCBbXSxcbiAgICBsb2M6IGJ1aWxkTG9jKGxvYyB8fCBudWxsKVxuICB9O1xufVxuXG4vLyBOb2Rlc1xuXG5mdW5jdGlvbiBidWlsZEVsZW1lbnQodGFnOiBzdHJpbmcsIGF0dHJpYnV0ZXM/OiBBU1QuQXR0ck5vZGVbXSwgbW9kaWZpZXJzPzogQVNULkVsZW1lbnRNb2RpZmllclN0YXRlbWVudFtdLCBjaGlsZHJlbj86IEFTVC5TdGF0ZW1lbnRbXSwgbG9jPzogQVNULlNvdXJjZUxvY2F0aW9uKTogQVNULkVsZW1lbnROb2RlO1xuZnVuY3Rpb24gYnVpbGRFbGVtZW50KHRhZzogc3RyaW5nLCBhdHRyaWJ1dGVzPzogQVNULkF0dHJOb2RlW10sIG1vZGlmaWVycz86IEFTVC5FbGVtZW50TW9kaWZpZXJTdGF0ZW1lbnRbXSwgY2hpbGRyZW4/OiBBU1QuU3RhdGVtZW50W10sIGNvbW1lbnRzPzogQVNULk11c3RhY2hlQ29tbWVudFN0YXRlbWVudFtdLCBsb2M/OiBBU1QuU291cmNlTG9jYXRpb24pOiBBU1QuRWxlbWVudE5vZGU7XG5cbmZ1bmN0aW9uIGJ1aWxkRWxlbWVudCh0YWc6IHN0cmluZywgYXR0cmlidXRlcz86IEFTVC5BdHRyTm9kZVtdLCBtb2RpZmllcnM/OiBBU1QuRWxlbWVudE1vZGlmaWVyU3RhdGVtZW50W10sIGNoaWxkcmVuPzogQVNULlN0YXRlbWVudFtdLCBjb21tZW50cz86IEFTVC5NdXN0YWNoZUNvbW1lbnRTdGF0ZW1lbnRbXSB8IEFTVC5Tb3VyY2VMb2NhdGlvbiwgbG9jPzogQVNULlNvdXJjZUxvY2F0aW9uKTogQVNULkVsZW1lbnROb2RlIHtcbiAgLy8gdGhpcyBpcyB1c2VkIGZvciBiYWNrd2FyZHMgY29tcGF0IHByaW9yIHRvIGBjb21tZW50c2AgYmVpbmcgYWRkZWQgdG8gdGhlIEFTVFxuICBpZiAoIUFycmF5LmlzQXJyYXkoY29tbWVudHMpKSB7XG4gICAgbG9jID0gY29tbWVudHM7XG4gICAgY29tbWVudHMgPSBbXTtcbiAgfVxuXG4gIHJldHVybiB7XG4gICAgdHlwZTogXCJFbGVtZW50Tm9kZVwiLFxuICAgIHRhZzogdGFnIHx8IFwiXCIsXG4gICAgYXR0cmlidXRlczogYXR0cmlidXRlcyB8fCBbXSxcbiAgICBibG9ja1BhcmFtczogW10sXG4gICAgbW9kaWZpZXJzOiBtb2RpZmllcnMgfHwgW10sXG4gICAgY29tbWVudHM6IGNvbW1lbnRzIHx8IFtdLFxuICAgIGNoaWxkcmVuOiBjaGlsZHJlbiB8fCBbXSxcbiAgICBsb2M6IGJ1aWxkTG9jKGxvYyB8fCBudWxsKVxuICB9O1xufVxuXG5mdW5jdGlvbiBidWlsZEF0dHIobmFtZTogc3RyaW5nLCB2YWx1ZTogQVNULkF0dHJOb2RlWyd2YWx1ZSddLCBsb2M/OiBBU1QuU291cmNlTG9jYXRpb24pOiBBU1QuQXR0ck5vZGUge1xuICByZXR1cm4ge1xuICAgIHR5cGU6IFwiQXR0ck5vZGVcIixcbiAgICBuYW1lOiBuYW1lLFxuICAgIHZhbHVlOiB2YWx1ZSxcbiAgICBsb2M6IGJ1aWxkTG9jKGxvYyB8fCBudWxsKVxuICB9O1xufVxuXG5mdW5jdGlvbiBidWlsZFRleHQoY2hhcnM/OiBzdHJpbmcsIGxvYz86IEFTVC5Tb3VyY2VMb2NhdGlvbik6IEFTVC5UZXh0Tm9kZSB7XG4gIHJldHVybiB7XG4gICAgdHlwZTogXCJUZXh0Tm9kZVwiLFxuICAgIGNoYXJzOiBjaGFycyB8fCBcIlwiLFxuICAgIGxvYzogYnVpbGRMb2MobG9jIHx8IG51bGwpXG4gIH07XG59XG5cbi8vIEV4cHJlc3Npb25zXG5cbmZ1bmN0aW9uIGJ1aWxkU2V4cHIocGF0aDogQVNULlBhdGhFeHByZXNzaW9uLCBwYXJhbXM/OiBBU1QuRXhwcmVzc2lvbltdLCBoYXNoPzogQVNULkhhc2gsIGxvYz86IEFTVC5Tb3VyY2VMb2NhdGlvbik6IEFTVC5TdWJFeHByZXNzaW9uIHtcbiAgcmV0dXJuIHtcbiAgICB0eXBlOiBcIlN1YkV4cHJlc3Npb25cIixcbiAgICBwYXRoOiBidWlsZFBhdGgocGF0aCksXG4gICAgcGFyYW1zOiBwYXJhbXMgfHwgW10sXG4gICAgaGFzaDogaGFzaCB8fCBidWlsZEhhc2goW10pLFxuICAgIGxvYzogYnVpbGRMb2MobG9jIHx8IG51bGwpXG4gIH07XG59XG5cbmZ1bmN0aW9uIGJ1aWxkUGF0aChvcmlnaW5hbDogQnVpbGRlclBhdGgsIGxvYz86IEFTVC5Tb3VyY2VMb2NhdGlvbik6IEFTVC5QYXRoRXhwcmVzc2lvbiB7XG4gIGlmICh0eXBlb2Ygb3JpZ2luYWwgIT09ICdzdHJpbmcnKSByZXR1cm4gb3JpZ2luYWw7XG5cbiAgbGV0IHBhcnRzID0gb3JpZ2luYWwuc3BsaXQoJy4nKTtcbiAgbGV0IHRoaXNIZWFkID0gZmFsc2U7XG5cbiAgaWYgKHBhcnRzWzBdID09PSAndGhpcycpIHtcbiAgICB0aGlzSGVhZCA9IHRydWU7XG4gICAgcGFydHMgPSBwYXJ0cy5zbGljZSgxKTtcbiAgfVxuXG4gIHJldHVybiB7XG4gICAgdHlwZTogXCJQYXRoRXhwcmVzc2lvblwiLFxuICAgIG9yaWdpbmFsLFxuICAgIHRoaXM6IHRoaXNIZWFkLFxuICAgIHBhcnRzLFxuICAgIGRhdGE6IGZhbHNlLFxuICAgIGxvYzogYnVpbGRMb2MobG9jIHx8IG51bGwpXG4gIH07XG59XG5cbmZ1bmN0aW9uIGJ1aWxkTGl0ZXJhbDxUIGV4dGVuZHMgQVNULkxpdGVyYWw+KHR5cGU6IFRbJ3R5cGUnXSwgdmFsdWU6IFRbJ3ZhbHVlJ10sIGxvYz86IEFTVC5Tb3VyY2VMb2NhdGlvbik6IEFTVC5MaXRlcmFsIHtcbiAgcmV0dXJuIHtcbiAgICB0eXBlLFxuICAgIHZhbHVlLFxuICAgIG9yaWdpbmFsOiB2YWx1ZSxcbiAgICBsb2M6IGJ1aWxkTG9jKGxvYyB8fCBudWxsKVxuICB9IGFzIEFTVC5MaXRlcmFsO1xufVxuXG4vLyBNaXNjZWxsYW5lb3VzXG5cbmZ1bmN0aW9uIGJ1aWxkSGFzaChwYWlycz86IEFTVC5IYXNoUGFpcltdLCBsb2M/OiBBU1QuU291cmNlTG9jYXRpb24pOiBBU1QuSGFzaCB7XG4gIHJldHVybiB7XG4gICAgdHlwZTogXCJIYXNoXCIsXG4gICAgcGFpcnM6IHBhaXJzIHx8IFtdLFxuICAgIGxvYzogYnVpbGRMb2MobG9jIHx8IG51bGwpXG4gIH07XG59XG5cbmZ1bmN0aW9uIGJ1aWxkUGFpcihrZXk6IHN0cmluZywgdmFsdWU6IEFTVC5FeHByZXNzaW9uLCBsb2M/OiBBU1QuU291cmNlTG9jYXRpb24pOiBBU1QuSGFzaFBhaXIge1xuICByZXR1cm4ge1xuICAgIHR5cGU6IFwiSGFzaFBhaXJcIixcbiAgICBrZXk6IGtleSxcbiAgICB2YWx1ZSxcbiAgICBsb2M6IGJ1aWxkTG9jKGxvYyB8fCBudWxsKVxuICB9O1xufVxuXG5mdW5jdGlvbiBidWlsZFByb2dyYW0oYm9keT86IEFTVC5TdGF0ZW1lbnRbXSwgYmxvY2tQYXJhbXM/OiBzdHJpbmdbXSwgbG9jPzogQVNULlNvdXJjZUxvY2F0aW9uKTogQVNULlByb2dyYW0ge1xuICByZXR1cm4ge1xuICAgIHR5cGU6IFwiUHJvZ3JhbVwiLFxuICAgIGJvZHk6IGJvZHkgfHwgW10sXG4gICAgYmxvY2tQYXJhbXM6IGJsb2NrUGFyYW1zIHx8IFtdLFxuICAgIGxvYzogYnVpbGRMb2MobG9jIHx8IG51bGwpXG4gIH07XG59XG5cbmZ1bmN0aW9uIGJ1aWxkU291cmNlKHNvdXJjZT86IHN0cmluZykge1xuICByZXR1cm4gc291cmNlIHx8IG51bGw7XG59XG5cbmZ1bmN0aW9uIGJ1aWxkUG9zaXRpb24obGluZTogbnVtYmVyLCBjb2x1bW46IG51bWJlcikge1xuICByZXR1cm4ge1xuICAgIGxpbmUsXG4gICAgY29sdW1uXG4gIH07XG59XG5cbmV4cG9ydCBjb25zdCBTWU5USEVUSUM6IEFTVC5Tb3VyY2VMb2NhdGlvbiA9IHsgc291cmNlOiAnKHN5bnRoZXRpYyknLCBzdGFydDogeyBsaW5lOiAxLCBjb2x1bW46IDAgfSwgZW5kOiB7IGxpbmU6IDEsIGNvbHVtbjogMCB9IH07XG5cbmZ1bmN0aW9uIGJ1aWxkTG9jKGxvYzpPcHRpb248QVNULlNvdXJjZUxvY2F0aW9uPik6IEFTVC5Tb3VyY2VMb2NhdGlvbjtcbmZ1bmN0aW9uIGJ1aWxkTG9jKHN0YXJ0TGluZTogbnVtYmVyLCBzdGFydENvbHVtbjogbnVtYmVyLCBlbmRMaW5lPzogbnVtYmVyLCBlbmRDb2x1bW4/OiBudW1iZXIsIHNvdXJjZT86IHN0cmluZyk6IEFTVC5Tb3VyY2VMb2NhdGlvbjtcblxuZnVuY3Rpb24gYnVpbGRMb2MoLi4uYXJnczogYW55W10pOiBBU1QuU291cmNlTG9jYXRpb24ge1xuICBpZiAoYXJncy5sZW5ndGggPT09IDEpIHtcbiAgICBsZXQgbG9jID0gYXJnc1swXTtcblxuICAgIGlmIChsb2MgJiYgdHlwZW9mIGxvYyA9PT0gJ29iamVjdCcpIHtcbiAgICAgIHJldHVybiB7XG4gICAgICAgIHNvdXJjZTogYnVpbGRTb3VyY2UobG9jLnNvdXJjZSksXG4gICAgICAgIHN0YXJ0OiBidWlsZFBvc2l0aW9uKGxvYy5zdGFydC5saW5lLCBsb2Muc3RhcnQuY29sdW1uKSxcbiAgICAgICAgZW5kOiBidWlsZFBvc2l0aW9uKGxvYy5lbmQubGluZSwgbG9jLmVuZC5jb2x1bW4pXG4gICAgICB9O1xuICAgIH0gZWxzZSB7XG4gICAgICByZXR1cm4gU1lOVEhFVElDO1xuICAgIH1cbiAgfSBlbHNlIHtcbiAgICBsZXQgWyBzdGFydExpbmUsIHN0YXJ0Q29sdW1uLCBlbmRMaW5lLCBlbmRDb2x1bW4sIHNvdXJjZSBdID0gYXJncztcbiAgICByZXR1cm4ge1xuICAgICAgc291cmNlOiBidWlsZFNvdXJjZShzb3VyY2UpLFxuICAgICAgc3RhcnQ6IGJ1aWxkUG9zaXRpb24oc3RhcnRMaW5lLCBzdGFydENvbHVtbiksXG4gICAgICBlbmQ6IGJ1aWxkUG9zaXRpb24oZW5kTGluZSwgZW5kQ29sdW1uKVxuICAgIH07XG4gIH1cbn1cblxuZXhwb3J0IGRlZmF1bHQge1xuICBtdXN0YWNoZTogYnVpbGRNdXN0YWNoZSxcbiAgYmxvY2s6IGJ1aWxkQmxvY2ssXG4gIHBhcnRpYWw6IGJ1aWxkUGFydGlhbCxcbiAgY29tbWVudDogYnVpbGRDb21tZW50LFxuICBtdXN0YWNoZUNvbW1lbnQ6IGJ1aWxkTXVzdGFjaGVDb21tZW50LFxuICBlbGVtZW50OiBidWlsZEVsZW1lbnQsXG4gIGVsZW1lbnRNb2RpZmllcjogYnVpbGRFbGVtZW50TW9kaWZpZXIsXG4gIGF0dHI6IGJ1aWxkQXR0cixcbiAgdGV4dDogYnVpbGRUZXh0LFxuICBzZXhwcjogYnVpbGRTZXhwcixcbiAgcGF0aDogYnVpbGRQYXRoLFxuICBjb25jYXQ6IGJ1aWxkQ29uY2F0LFxuICBoYXNoOiBidWlsZEhhc2gsXG4gIHBhaXI6IGJ1aWxkUGFpcixcbiAgbGl0ZXJhbDogYnVpbGRMaXRlcmFsLFxuICBwcm9ncmFtOiBidWlsZFByb2dyYW0sXG4gIGxvYzogYnVpbGRMb2MsXG4gIHBvczogYnVpbGRQb3NpdGlvbixcblxuICBzdHJpbmc6IGxpdGVyYWwoJ1N0cmluZ0xpdGVyYWwnKSxcbiAgYm9vbGVhbjogbGl0ZXJhbCgnQm9vbGVhbkxpdGVyYWwnKSxcbiAgbnVtYmVyOiBsaXRlcmFsKCdOdW1iZXJMaXRlcmFsJyksXG4gIHVuZGVmaW5lZCgpIHsgcmV0dXJuIGJ1aWxkTGl0ZXJhbCgnVW5kZWZpbmVkTGl0ZXJhbCcsIHVuZGVmaW5lZCk7IH0sXG4gIG51bGwoKSB7IHJldHVybiBidWlsZExpdGVyYWwoJ051bGxMaXRlcmFsJywgbnVsbCk7IH1cbn07XG5cbmZ1bmN0aW9uIGxpdGVyYWw8VCBleHRlbmRzIEFTVC5MaXRlcmFsPih0eXBlOiBUWyd0eXBlJ10pIHtcbiAgcmV0dXJuIGZ1bmN0aW9uKHZhbHVlOiBUWyd2YWx1ZSddKSB7XG4gICAgcmV0dXJuIGJ1aWxkTGl0ZXJhbCh0eXBlLCB2YWx1ZSk7XG4gIH07XG59XG4iXX0=