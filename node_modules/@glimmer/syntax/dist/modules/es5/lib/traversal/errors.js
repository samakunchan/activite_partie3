var TraversalError = function () {
    TraversalError.prototype = Object.create(Error.prototype);
    TraversalError.prototype.constructor = TraversalError;
    function TraversalError(message, node, parent, key) {
        var error = Error.call(this, message);
        this.key = key;
        this.message = message;
        this.node = node;
        this.parent = parent;
        this.stack = error.stack;
    }
    return TraversalError;
}();
export default TraversalError;
export function cannotRemoveNode(node, parent, key) {
    return new TraversalError("Cannot remove a node unless it is part of an array", node, parent, key);
}
export function cannotReplaceNode(node, parent, key) {
    return new TraversalError("Cannot replace a node with multiple nodes unless it is part of an array", node, parent, key);
}
export function cannotReplaceOrRemoveInKeyHandlerYet(node, key) {
    return new TraversalError("Replacing and removing in key handlers is not yet supported.", node, null, key);
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZXJyb3JzLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vLi4vcGFja2FnZXMvQGdsaW1tZXIvc3ludGF4L2xpYi90cmF2ZXJzYWwvZXJyb3JzLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQWVBLElBQU0sQUFBYyxBQUE4Qiw2QkFDaEQsQUFBYzttQkFBQyxBQUFTLFlBQUcsQUFBTSxPQUFDLEFBQU0sT0FBQyxBQUFLLE1BQUMsQUFBUyxBQUFDLEFBQUMsQUFDMUQsQUFBYzttQkFBQyxBQUFTLFVBQUMsQUFBVyxjQUFHLEFBQWMsQUFBQyxBQUV0RDs0QkFBOEMsQUFBZSxTQUFFLEFBQWMsTUFBRSxBQUF3QixRQUFFLEFBQVcsS0FDbEg7WUFBSSxBQUFLLFFBQUcsQUFBSyxNQUFDLEFBQUksS0FBQyxBQUFJLE1BQUUsQUFBTyxBQUFDLEFBQUMsQUFFdEMsQUFBSTthQUFDLEFBQUcsTUFBRyxBQUFHLEFBQUMsQUFDZixBQUFJO2FBQUMsQUFBTyxVQUFHLEFBQU8sQUFBQyxBQUN2QixBQUFJO2FBQUMsQUFBSSxPQUFHLEFBQUksQUFBQyxBQUNqQixBQUFJO2FBQUMsQUFBTSxTQUFHLEFBQU0sQUFBQyxBQUNyQixBQUFJO2FBQUMsQUFBSyxRQUFHLEFBQUssTUFBQyxBQUFLLEFBQUMsQUFDM0IsQUFBQztBQUVELEFBQU07V0FBQyxBQUFxQixBQUFDLEFBQy9CLEFBQUMsQUFBRSxBQUFDLEFBQUM7QUFmOEM7QUFpQm5ELGVBQWUsQUFBYyxBQUFDO0FBRTlCLEFBQU0saUNBQTJCLEFBQWMsTUFBRSxBQUFlLFFBQUUsQUFBVyxLQUMzRSxBQUFNO1dBQUMsSUFBSSxBQUFjLGVBQ3ZCLEFBQW9ELHNEQUNwRCxBQUFJLE1BQUUsQUFBTSxRQUFFLEFBQUcsQUFDbEIsQUFBQyxBQUNKLEFBQUM7O0FBRUQsQUFBTSxrQ0FBNEIsQUFBYyxNQUFFLEFBQWdCLFFBQUUsQUFBVyxLQUM3RSxBQUFNO1dBQUMsSUFBSSxBQUFjLGVBQ3ZCLEFBQXlFLDJFQUN6RSxBQUFJLE1BQUUsQUFBTSxRQUFFLEFBQUcsQUFDbEIsQUFBQyxBQUNKLEFBQUM7O0FBRUQsQUFBTSxxREFBK0MsQUFBYyxNQUFFLEFBQVcsS0FDOUUsQUFBTTtXQUFDLElBQUksQUFBYyxlQUN2QixBQUE4RCxnRUFDOUQsQUFBSSxNQUFFLEFBQUksTUFBRSxBQUFHLEFBQ2hCLEFBQUMsQUFDSixBQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0ICogYXMgQVNUIGZyb20gJy4uL3R5cGVzL25vZGVzJztcbmltcG9ydCB7IE9wdGlvbiB9IGZyb20gJ0BnbGltbWVyL2ludGVyZmFjZXMnO1xuXG5leHBvcnQgaW50ZXJmYWNlIFRyYXZlcnNhbEVycm9yIGV4dGVuZHMgRXJyb3Ige1xuICBjb25zdHJ1Y3RvcjogVHJhdmVyc2FsRXJyb3JDb25zdHJ1Y3RvcjtcbiAga2V5OiBzdHJpbmc7XG4gIG5vZGU6IEFTVC5Ob2RlO1xuICBwYXJlbnQ6IE9wdGlvbjxBU1QuTm9kZT47XG59XG5cbmV4cG9ydCBpbnRlcmZhY2UgVHJhdmVyc2FsRXJyb3JDb25zdHJ1Y3RvciB7XG4gIG5ldyAobWVzc2FnZTogc3RyaW5nLCBub2RlOiBBU1QuTm9kZSwgcGFyZW50OiBPcHRpb248QVNULk5vZGU+LCBrZXk6IHN0cmluZyk6IFRyYXZlcnNhbEVycm9yO1xuICByZWFkb25seSBwcm90b3R5cGU6IFRyYXZlcnNhbEVycm9yO1xufVxuXG5jb25zdCBUcmF2ZXJzYWxFcnJvcjogVHJhdmVyc2FsRXJyb3JDb25zdHJ1Y3RvciA9IChmdW5jdGlvbiAoKSB7XG4gIFRyYXZlcnNhbEVycm9yLnByb3RvdHlwZSA9IE9iamVjdC5jcmVhdGUoRXJyb3IucHJvdG90eXBlKTtcbiAgVHJhdmVyc2FsRXJyb3IucHJvdG90eXBlLmNvbnN0cnVjdG9yID0gVHJhdmVyc2FsRXJyb3I7XG5cbiAgZnVuY3Rpb24gVHJhdmVyc2FsRXJyb3IodGhpczogVHJhdmVyc2FsRXJyb3IsIG1lc3NhZ2U6IHN0cmluZywgbm9kZTogQVNULk5vZGUsIHBhcmVudDogT3B0aW9uPEFTVC5Ob2RlPiwga2V5OiBzdHJpbmcpIHtcbiAgICBsZXQgZXJyb3IgPSBFcnJvci5jYWxsKHRoaXMsIG1lc3NhZ2UpO1xuXG4gICAgdGhpcy5rZXkgPSBrZXk7XG4gICAgdGhpcy5tZXNzYWdlID0gbWVzc2FnZTtcbiAgICB0aGlzLm5vZGUgPSBub2RlO1xuICAgIHRoaXMucGFyZW50ID0gcGFyZW50O1xuICAgIHRoaXMuc3RhY2sgPSBlcnJvci5zdGFjaztcbiAgfVxuXG4gIHJldHVybiBUcmF2ZXJzYWxFcnJvciBhcyBhbnk7XG59KCkpO1xuXG5leHBvcnQgZGVmYXVsdCBUcmF2ZXJzYWxFcnJvcjtcblxuZXhwb3J0IGZ1bmN0aW9uIGNhbm5vdFJlbW92ZU5vZGUobm9kZTogQVNULk5vZGUsIHBhcmVudDpBU1QuTm9kZSwga2V5OiBzdHJpbmcpIHtcbiAgcmV0dXJuIG5ldyBUcmF2ZXJzYWxFcnJvcihcbiAgICBcIkNhbm5vdCByZW1vdmUgYSBub2RlIHVubGVzcyBpdCBpcyBwYXJ0IG9mIGFuIGFycmF5XCIsXG4gICAgbm9kZSwgcGFyZW50LCBrZXlcbiAgKTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGNhbm5vdFJlcGxhY2VOb2RlKG5vZGU6IEFTVC5Ob2RlLCBwYXJlbnQ6IEFTVC5Ob2RlLCBrZXk6IHN0cmluZykge1xuICByZXR1cm4gbmV3IFRyYXZlcnNhbEVycm9yKFxuICAgIFwiQ2Fubm90IHJlcGxhY2UgYSBub2RlIHdpdGggbXVsdGlwbGUgbm9kZXMgdW5sZXNzIGl0IGlzIHBhcnQgb2YgYW4gYXJyYXlcIixcbiAgICBub2RlLCBwYXJlbnQsIGtleVxuICApO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gY2Fubm90UmVwbGFjZU9yUmVtb3ZlSW5LZXlIYW5kbGVyWWV0KG5vZGU6IEFTVC5Ob2RlLCBrZXk6IHN0cmluZykge1xuICByZXR1cm4gbmV3IFRyYXZlcnNhbEVycm9yKFxuICAgIFwiUmVwbGFjaW5nIGFuZCByZW1vdmluZyBpbiBrZXkgaGFuZGxlcnMgaXMgbm90IHlldCBzdXBwb3J0ZWQuXCIsXG4gICAgbm9kZSwgbnVsbCwga2V5XG4gICk7XG59XG4iXX0=