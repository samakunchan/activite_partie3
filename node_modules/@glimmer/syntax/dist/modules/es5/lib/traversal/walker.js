function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var Walker = function () {
    function Walker(order) {
        _classCallCheck(this, Walker);

        this.order = order;
        this.stack = [];
    }

    Walker.prototype.visit = function visit(node, callback) {
        if (!node) {
            return;
        }
        this.stack.push(node);
        if (this.order === 'post') {
            this.children(node, callback);
            callback(node, this);
        } else {
            callback(node, this);
            this.children(node, callback);
        }
        this.stack.pop();
    };

    Walker.prototype.children = function children(node, callback) {
        var visitor = visitors[node.type];
        if (visitor) {
            visitor(this, node, callback);
        }
    };

    return Walker;
}();

export default Walker;

var visitors = {
    Program: function Program(walker, node, callback) {
        for (var i = 0; i < node.body.length; i++) {
            walker.visit(node.body[i], callback);
        }
    },
    ElementNode: function ElementNode(walker, node, callback) {
        for (var i = 0; i < node.children.length; i++) {
            walker.visit(node.children[i], callback);
        }
    },
    BlockStatement: function BlockStatement(walker, node, callback) {
        walker.visit(node.program, callback);
        walker.visit(node.inverse || null, callback);
    }
};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoid2Fsa2VyLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vLi4vcGFja2FnZXMvQGdsaW1tZXIvc3ludGF4L2xpYi90cmF2ZXJzYWwvd2Fsa2VyLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7O0lBT0U7b0JBQW1CLEFBQVc7QUFBWDs7YUFBSyxRQURqQixBQUNZLEFBQUssQUFBTTthQURsQixRQUFVLEFBQUUsQUFBQyxBQUNRLEFBQUM7QUFFbEMsQUFBSzs7NENBQXFCLEFBQWUsTUFBRSxBQUF5QixVQUNsRSxBQUFFLEFBQUM7WUFBQyxDQUFDLEFBQUksQUFBQyxNQUFDLEFBQUMsQUFDVixBQUFNLEFBQUMsQUFDVDtBQUFDO0FBRUQsQUFBSTthQUFDLEFBQUssTUFBQyxBQUFJLEtBQUMsQUFBSSxBQUFDLEFBQUMsQUFFdEIsQUFBRSxBQUFDO1lBQUMsQUFBSSxLQUFDLEFBQUssVUFBSyxBQUFNLEFBQUMsUUFBQyxBQUFDLEFBQzFCLEFBQUk7aUJBQUMsQUFBUSxTQUFDLEFBQUksTUFBRSxBQUFRLEFBQUMsQUFBQyxBQUM5QixBQUFRO3FCQUFDLEFBQUksTUFBRSxBQUFJLEFBQUMsQUFBQyxBQUN2QixBQUFDLEFBQUMsQUFBSTtlQUFDLEFBQUMsQUFDTixBQUFRO3FCQUFDLEFBQUksTUFBRSxBQUFJLEFBQUMsQUFBQyxBQUNyQixBQUFJO2lCQUFDLEFBQVEsU0FBQyxBQUFJLE1BQUUsQUFBUSxBQUFDLEFBQUMsQUFDaEMsQUFBQztBQUVELEFBQUk7YUFBQyxBQUFLLE1BQUMsQUFBRyxBQUFFLEFBQUMsQUFDbkIsQUFBQztBQUVELEFBQVE7O2tEQUFDLEFBQVMsTUFBRSxBQUFhLFVBQy9CO1lBQUksQUFBTyxVQUFHLEFBQVEsU0FBQyxBQUFJLEtBQUMsQUFBSSxBQUFDLEFBQUMsQUFDbEMsQUFBRSxBQUFDO1lBQUMsQUFBTyxBQUFDLFNBQUMsQUFBQyxBQUNaLEFBQU87b0JBQUMsQUFBSSxNQUFFLEFBQUksTUFBRSxBQUFRLEFBQUMsQUFBQyxBQUNoQyxBQUFDLEFBQ0g7QUFBQyxBQUNGOzs7Ozs7OztBQUVELElBQUksQUFBUTs4QkFDRixBQUFjLFFBQUUsQUFBaUIsTUFBRSxBQUFnQyxVQUN6RSxBQUFHLEFBQUM7YUFBQyxJQUFJLEFBQUMsSUFBRyxBQUFDLEdBQUUsQUFBQyxJQUFHLEFBQUksS0FBQyxBQUFJLEtBQUMsQUFBTSxRQUFFLEFBQUMsQUFBRSxLQUFFLEFBQUMsQUFDMUMsQUFBTTttQkFBQyxBQUFLLE1BQUMsQUFBSSxLQUFDLEFBQUksS0FBQyxBQUFDLEFBQUMsSUFBRSxBQUFRLEFBQUMsQUFBQyxBQUN2QyxBQUFDLEFBQ0g7QUFBQztBQUVELEFBQVc7c0NBQUMsQUFBYyxRQUFFLEFBQXFCLE1BQUUsQUFBZ0MsVUFDakYsQUFBRyxBQUFDO2FBQUMsSUFBSSxBQUFDLElBQUcsQUFBQyxHQUFFLEFBQUMsSUFBRyxBQUFJLEtBQUMsQUFBUSxTQUFDLEFBQU0sUUFBRSxBQUFDLEFBQUUsS0FBRSxBQUFDLEFBQzlDLEFBQU07bUJBQUMsQUFBSyxNQUFDLEFBQUksS0FBQyxBQUFRLFNBQUMsQUFBQyxBQUFDLElBQUUsQUFBUSxBQUFDLEFBQUMsQUFDM0MsQUFBQyxBQUNIO0FBQUM7QUFFRCxBQUFjOzRDQUFDLEFBQWMsUUFBRSxBQUF3QixNQUFFLEFBQW1DLFVBQzFGLEFBQU07ZUFBQyxBQUFLLE1BQUMsQUFBSSxLQUFDLEFBQU8sU0FBRSxBQUFRLEFBQUMsQUFBQyxBQUNyQyxBQUFNO2VBQUMsQUFBSyxNQUFDLEFBQUksS0FBQyxBQUFPLFdBQUksQUFBSSxNQUFFLEFBQVEsQUFBQyxBQUFDLEFBQy9DLEFBQUMsQUFDRixBQUFDO0FBakJhO0FBQ2IsQUFBTyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IE9wdGlvbiB9IGZyb20gXCJAZ2xpbW1lci9pbnRlcmZhY2VzXCI7XG5pbXBvcnQgKiBhcyBBU1QgZnJvbSAnLi4vdHlwZXMvbm9kZXMnO1xuXG5leHBvcnQgdHlwZSBOb2RlQ2FsbGJhY2s8TiBleHRlbmRzIEFTVC5Ob2RlPiA9IChub2RlOiBOLCB3YWxrZXI6IFdhbGtlcikgPT4gdm9pZDtcblxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgV2Fsa2VyIHtcbiAgcHVibGljIHN0YWNrOiBhbnlbXSA9IFtdO1xuICBjb25zdHJ1Y3RvcihwdWJsaWMgb3JkZXI/OiBhbnkpIHt9XG5cbiAgdmlzaXQ8TiBleHRlbmRzIEFTVC5Ob2RlPihub2RlOiBPcHRpb248Tj4sIGNhbGxiYWNrOiBOb2RlQ2FsbGJhY2s8Tj4pIHtcbiAgICBpZiAoIW5vZGUpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICB0aGlzLnN0YWNrLnB1c2gobm9kZSk7XG5cbiAgICBpZiAodGhpcy5vcmRlciA9PT0gJ3Bvc3QnKSB7XG4gICAgICB0aGlzLmNoaWxkcmVuKG5vZGUsIGNhbGxiYWNrKTtcbiAgICAgIGNhbGxiYWNrKG5vZGUsIHRoaXMpO1xuICAgIH0gZWxzZSB7XG4gICAgICBjYWxsYmFjayhub2RlLCB0aGlzKTtcbiAgICAgIHRoaXMuY2hpbGRyZW4obm9kZSwgY2FsbGJhY2spO1xuICAgIH1cblxuICAgIHRoaXMuc3RhY2sucG9wKCk7XG4gIH1cblxuICBjaGlsZHJlbihub2RlOiBhbnksIGNhbGxiYWNrOiBhbnkpIHtcbiAgICBsZXQgdmlzaXRvciA9IHZpc2l0b3JzW25vZGUudHlwZV07XG4gICAgaWYgKHZpc2l0b3IpIHtcbiAgICAgIHZpc2l0b3IodGhpcywgbm9kZSwgY2FsbGJhY2spO1xuICAgIH1cbiAgfVxufVxuXG5sZXQgdmlzaXRvcnMgPSB7XG4gIFByb2dyYW0od2Fsa2VyOiBXYWxrZXIsIG5vZGU6IEFTVC5Qcm9ncmFtLCBjYWxsYmFjazogTm9kZUNhbGxiYWNrPEFTVC5Ob2RlPikge1xuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgbm9kZS5ib2R5Lmxlbmd0aDsgaSsrKSB7XG4gICAgICB3YWxrZXIudmlzaXQobm9kZS5ib2R5W2ldLCBjYWxsYmFjayk7XG4gICAgfVxuICB9LFxuXG4gIEVsZW1lbnROb2RlKHdhbGtlcjogV2Fsa2VyLCBub2RlOiBBU1QuRWxlbWVudE5vZGUsIGNhbGxiYWNrOiBOb2RlQ2FsbGJhY2s8QVNULk5vZGU+KSB7XG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCBub2RlLmNoaWxkcmVuLmxlbmd0aDsgaSsrKSB7XG4gICAgICB3YWxrZXIudmlzaXQobm9kZS5jaGlsZHJlbltpXSwgY2FsbGJhY2spO1xuICAgIH1cbiAgfSxcblxuICBCbG9ja1N0YXRlbWVudCh3YWxrZXI6IFdhbGtlciwgbm9kZTogQVNULkJsb2NrU3RhdGVtZW50LCBjYWxsYmFjazogTm9kZUNhbGxiYWNrPEFTVC5Qcm9ncmFtPikge1xuICAgIHdhbGtlci52aXNpdChub2RlLnByb2dyYW0sIGNhbGxiYWNrKTtcbiAgICB3YWxrZXIudmlzaXQobm9kZS5pbnZlcnNlIHx8IG51bGwsIGNhbGxiYWNrKTtcbiAgfVxufTtcbiJdfQ==