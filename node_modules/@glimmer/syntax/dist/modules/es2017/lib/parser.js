import { EventedTokenizer, EntityParser, HTML5NamedCharRefs as namedCharRefs } from "simple-html-tokenizer";
import { assert } from '@glimmer/util';
const entityParser = new EntityParser(namedCharRefs);
export class Parser {
    constructor(source, options = {}) {
        this.elementStack = [];
        this.currentAttribute = null;
        this.currentNode = null;
        this.tokenizer = new EventedTokenizer(this, entityParser);
        this.options = options;
        this.tokenizer.states.tagOpen = function () {
            let char = this.consume();
            if (char === "!") {
                this['state'] = 'markupDeclaration';
            } else if (char === "/") {
                this['state'] = 'endTagOpen';
            } else if (/[A-Za-z]/.test(char)) {
                this['state'] = 'tagName';
                this['delegate'].beginStartTag();
                this['delegate'].appendToTagName(char);
            }
        };
        this.tokenizer.states.endTagOpen = function () {
            let char = this.consume();
            if (/[A-Za-z]/.test(char)) {
                this['state'] = 'tagName';
                this['delegate'].beginEndTag();
                this['delegate'].appendToTagName(char);
            }
        };
        this.source = source.split(/(?:\r\n?|\n)/g);
    }
    get currentAttr() {
        return this.currentAttribute;
    }
    get currentTag() {
        let node = this.currentNode;
        (false && assert(node && (node.type === 'StartTag' || node.type === 'EndTag'), 'expected tag'));

        return node;
    }
    get currentStartTag() {
        let node = this.currentNode;
        (false && assert(node && node.type === 'StartTag', 'expected start tag'));

        return node;
    }
    get currentEndTag() {
        let node = this.currentNode;
        (false && assert(node && node.type === 'EndTag', 'expected end tag'));

        return node;
    }
    get currentComment() {
        let node = this.currentNode;
        (false && assert(node && node.type === 'CommentStatement', 'expected a comment'));

        return node;
    }
    get currentData() {
        let node = this.currentNode;
        (false && assert(node && node.type === 'TextNode', 'expected a text node'));

        return node;
    }
    acceptNode(node) {
        return this[node.type](node);
    }
    currentElement() {
        return this.elementStack[this.elementStack.length - 1];
    }
    sourceForNode(node, endNode) {
        let firstLine = node.loc.start.line - 1;
        let currentLine = firstLine - 1;
        let firstColumn = node.loc.start.column;
        let string = [];
        let line;
        let lastLine;
        let lastColumn;
        if (endNode) {
            lastLine = endNode.loc.end.line - 1;
            lastColumn = endNode.loc.end.column;
        } else {
            lastLine = node.loc.end.line - 1;
            lastColumn = node.loc.end.column;
        }
        while (currentLine < lastLine) {
            currentLine++;
            line = this.source[currentLine];
            if (currentLine === firstLine) {
                if (firstLine === lastLine) {
                    string.push(line.slice(firstColumn, lastColumn));
                } else {
                    string.push(line.slice(firstColumn));
                }
            } else if (currentLine === lastLine) {
                string.push(line.slice(0, lastColumn));
            } else {
                string.push(line);
            }
        }
        return string.join('\n');
    }
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicGFyc2VyLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vcGFja2FnZXMvQGdsaW1tZXIvc3ludGF4L2xpYi9wYXJzZXIudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsQUFBTyxTQUNMLEFBQWdCLGtCQUNoQixBQUFZLGNBQ1osQUFBa0Isc0JBQUksQUFBYSxBQUNwQyxxQkFBTSxBQUF1QixBQUFDO0FBSy9CLEFBQU8sU0FBRSxBQUFNLEFBQUUsQUFBTSxBQUFFLGNBQU0sQUFBZSxBQUFDO0FBRS9DLE1BQU0sQUFBWSxlQUFHLElBQUksQUFBWSxhQUFDLEFBQWEsQUFBQyxBQUFDO0FBd0JyRCxBQUFNO0FBUUosZ0JBQVksQUFBYyxRQUFFLFVBQWtCLEFBQUU7QUFQdEMsYUFBWSxlQUFjLEFBQUUsQUFBQztBQUdoQyxhQUFnQixtQkFBc0IsQUFBSSxBQUFDO0FBQzNDLGFBQVcsY0FBNkUsQUFBSSxBQUFDO0FBQzdGLGFBQVMsWUFBRyxJQUFJLEFBQWdCLGlCQUFDLEFBQUksTUFBRSxBQUFZLEFBQUMsQUFBQztBQUcxRCxBQUFJLGFBQUMsQUFBTyxVQUFHLEFBQU8sQUFBQztBQUV2QixBQUFJLGFBQUMsQUFBUyxVQUFDLEFBQU0sT0FBQyxBQUFPLFVBQUc7QUFDOUIsZ0JBQUksQUFBSSxPQUFHLEFBQUksS0FBQyxBQUFPLEFBQUUsQUFBQztBQUMxQixBQUFFLEFBQUMsZ0JBQUMsQUFBSSxTQUFLLEFBQUcsQUFBQyxLQUFDLEFBQUM7QUFDakIsQUFBSSxxQkFBQyxBQUFPLEFBQUMsV0FBRyxBQUFtQixBQUFDLEFBQ3RDO0FBQUMsQUFBQyxBQUFJLHVCQUFLLEFBQUksU0FBSyxBQUFHLEFBQUMsS0FBQyxBQUFDO0FBQ3hCLEFBQUkscUJBQUMsQUFBTyxBQUFDLFdBQUcsQUFBWSxBQUFDLEFBQy9CO0FBQUMsQUFBQyxBQUFJLGFBRkMsQUFBRSxBQUFDLE1BRUgsQUFBRSxBQUFDLElBQUMsQUFBVSxXQUFDLEFBQUksS0FBQyxB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QUFBSSx1QkFBQyxBQUFDO0FBQ04sQUFBTSwyQkFBQyxBQUFJLEtBQUMsQUFBSSxLQUFDLEFBQUssTUFBQyxBQUFXLEFBQUMsQUFBQyxBQUFDLEFBQ3ZDO0FBQUMsQUFDSDtBQUFDLEFBQUMsQUFBSSx1QkFBSyxBQUFXLGdCQUFLLEFBQVEsQUFBQyxVQUFDLEFBQUM7QUFDcEMsQUFBTSx1QkFBQyxBQUFJLEtBQUMsQUFBSSxLQUFDLEFBQUssTUFBQyxBQUFDLEdBQUUsQUFBVSxBQUFDLEFBQUMsQUFBQyxBQUN6QztBQUFDLEFBQUMsQUFBSSxhQUZDLEFBQUUsQUFBQyxNQUVILEFBQUM7QUFDTixBQUFNLHVCQUFDLEFBQUksS0FBQyxBQUFJLEFBQUMsQUFBQyxBQUNwQjtBQUFDLEFBQ0g7QUFBQztBQUVELEFBQU0sZUFBQyxBQUFNLE9BQUMsQUFBSSxLQUFDLEFBQUksQUFBQyxBQUFDLEFBQzNCO0FBQUMsQUFDRiIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7XG4gIEV2ZW50ZWRUb2tlbml6ZXIsXG4gIEVudGl0eVBhcnNlcixcbiAgSFRNTDVOYW1lZENoYXJSZWZzIGFzIG5hbWVkQ2hhclJlZnNcbn0gZnJvbSBcInNpbXBsZS1odG1sLXRva2VuaXplclwiO1xuaW1wb3J0IHsgUHJvZ3JhbSB9IGZyb20gXCIuL3R5cGVzL25vZGVzXCI7XG5pbXBvcnQgKiBhcyBBU1QgZnJvbSBcIi4vdHlwZXMvbm9kZXNcIjtcbmltcG9ydCAqIGFzIEhhbmRsZWJhcnNBU1QgZnJvbSAnLi90eXBlcy9oYW5kbGViYXJzLWFzdCc7XG5pbXBvcnQgeyBPcHRpb24gfSBmcm9tICdAZ2xpbW1lci9pbnRlcmZhY2VzJztcbmltcG9ydCB7IGFzc2VydCwgZXhwZWN0IH0gZnJvbSAnQGdsaW1tZXIvdXRpbCc7XG5cbmNvbnN0IGVudGl0eVBhcnNlciA9IG5ldyBFbnRpdHlQYXJzZXIobmFtZWRDaGFyUmVmcyk7XG5cbmV4cG9ydCB0eXBlIEVsZW1lbnQgPSBBU1QuUHJvZ3JhbSB8IEFTVC5FbGVtZW50Tm9kZTtcblxuZXhwb3J0IGludGVyZmFjZSBUYWc8VCBleHRlbmRzICdTdGFydFRhZycgfCAnRW5kVGFnJz4ge1xuICB0eXBlOiBUO1xuICBuYW1lOiBzdHJpbmc7XG4gIGF0dHJpYnV0ZXM6IGFueVtdO1xuICBtb2RpZmllcnM6IGFueVtdO1xuICBjb21tZW50czogYW55W107XG4gIHNlbGZDbG9zaW5nOiBib29sZWFuO1xuICBsb2M6IEFTVC5Tb3VyY2VMb2NhdGlvbjtcbn1cblxuZXhwb3J0IGludGVyZmFjZSBBdHRyaWJ1dGUge1xuICBuYW1lOiBzdHJpbmc7XG4gIHBhcnRzOiAoQVNULk11c3RhY2hlU3RhdGVtZW50IHwgQVNULlRleHROb2RlKVtdO1xuICBpc1F1b3RlZDogYm9vbGVhbjtcbiAgaXNEeW5hbWljOiBib29sZWFuO1xuICBzdGFydDogQVNULlBvc2l0aW9uO1xuICB2YWx1ZVN0YXJ0TGluZTogbnVtYmVyO1xuICB2YWx1ZVN0YXJ0Q29sdW1uOiBudW1iZXI7XG59XG5cbmV4cG9ydCBjbGFzcyBQYXJzZXIge1xuICBwcm90ZWN0ZWQgZWxlbWVudFN0YWNrOiBFbGVtZW50W10gPSBbXTtcbiAgcHJpdmF0ZSBvcHRpb25zOiBPYmplY3Q7XG4gIHByaXZhdGUgc291cmNlOiBzdHJpbmdbXTtcbiAgcHVibGljIGN1cnJlbnRBdHRyaWJ1dGU6IE9wdGlvbjxBdHRyaWJ1dGU+ID0gbnVsbDtcbiAgcHVibGljIGN1cnJlbnROb2RlOiBPcHRpb248QVNULkNvbW1lbnRTdGF0ZW1lbnQgfCBBU1QuVGV4dE5vZGUgfCBUYWc8J1N0YXJ0VGFnJyB8ICdFbmRUYWcnPj4gPSBudWxsO1xuICBwdWJsaWMgdG9rZW5pemVyID0gbmV3IEV2ZW50ZWRUb2tlbml6ZXIodGhpcywgZW50aXR5UGFyc2VyKTtcblxuICBjb25zdHJ1Y3Rvcihzb3VyY2U6IHN0cmluZywgb3B0aW9uczogT2JqZWN0ID0ge30pIHtcbiAgICB0aGlzLm9wdGlvbnMgPSBvcHRpb25zO1xuXG4gICAgdGhpcy50b2tlbml6ZXIuc3RhdGVzLnRhZ09wZW4gPSBmdW5jdGlvbih0aGlzOiBFdmVudGVkVG9rZW5pemVyKSB7XG4gICAgICBsZXQgY2hhciA9IHRoaXMuY29uc3VtZSgpO1xuICAgICAgaWYgKGNoYXIgPT09IFwiIVwiKSB7XG4gICAgICAgIHRoaXNbJ3N0YXRlJ10gPSAnbWFya3VwRGVjbGFyYXRpb24nO1xuICAgICAgfSBlbHNlIGlmIChjaGFyID09PSBcIi9cIikge1xuICAgICAgICB0aGlzWydzdGF0ZSddID0gJ2VuZFRhZ09wZW4nO1xuICAgICAgfSBlbHNlIGlmICgvW0EtWmEtel0vLnRlc3QoY2hhcikpIHtcbiAgICAgICAgdGhpc1snc3RhdGUnXSA9ICd0YWdOYW1lJztcbiAgICAgICAgdGhpc1snZGVsZWdhdGUnXS5iZWdpblN0YXJ0VGFnKCk7XG4gICAgICAgIHRoaXNbJ2RlbGVnYXRlJ10uYXBwZW5kVG9UYWdOYW1lKGNoYXIpO1xuICAgICAgfVxuICAgIH07XG5cbiAgICB0aGlzLnRva2VuaXplci5zdGF0ZXMuZW5kVGFnT3BlbiA9IGZ1bmN0aW9uKHRoaXM6IEV2ZW50ZWRUb2tlbml6ZXIpIHtcbiAgICAgIGxldCBjaGFyID0gdGhpcy5jb25zdW1lKCk7XG4gICAgICBpZiAoL1tBLVphLXpdLy50ZXN0KGNoYXIpKSB7XG4gICAgICAgIHRoaXNbJ3N0YXRlJ10gPSAndGFnTmFtZSc7XG4gICAgICAgIHRoaXNbJ2RlbGVnYXRlJ10uYmVnaW5FbmRUYWcoKTtcbiAgICAgICAgdGhpc1snZGVsZWdhdGUnXS5hcHBlbmRUb1RhZ05hbWUoY2hhcik7XG4gICAgICB9XG4gICAgfTtcblxuICAgIHRoaXMuc291cmNlID0gc291cmNlLnNwbGl0KC8oPzpcXHJcXG4/fFxcbikvZyk7XG4gIH1cblxuICBnZXQgY3VycmVudEF0dHIoKTogQXR0cmlidXRlIHtcbiAgICByZXR1cm4gZXhwZWN0KHRoaXMuY3VycmVudEF0dHJpYnV0ZSwgJ2V4cGVjdGVkIGF0dHJpYnV0ZScpO1xuICB9XG5cbiAgZ2V0IGN1cnJlbnRUYWcoKTogVGFnPCdTdGFydFRhZycgfCAnRW5kVGFnJz4ge1xuICAgIGxldCBub2RlID0gdGhpcy5jdXJyZW50Tm9kZTtcbiAgICBhc3NlcnQobm9kZSAmJiAobm9kZS50eXBlID09PSAnU3RhcnRUYWcnIHx8IG5vZGUudHlwZSA9PT0gJ0VuZFRhZycpLCAnZXhwZWN0ZWQgdGFnJyk7XG4gICAgcmV0dXJuIG5vZGUgYXMgVGFnPCdTdGFydFRhZycgfCAnRW5kVGFnJz47XG4gIH1cblxuICBnZXQgY3VycmVudFN0YXJ0VGFnKCk6IFRhZzwnU3RhcnRUYWcnPiB7XG4gICAgbGV0IG5vZGUgPSB0aGlzLmN1cnJlbnROb2RlO1xuICAgIGFzc2VydChub2RlICYmIG5vZGUudHlwZSA9PT0gJ1N0YXJ0VGFnJywgJ2V4cGVjdGVkIHN0YXJ0IHRhZycpO1xuICAgIHJldHVybiBub2RlIGFzIFRhZzwnU3RhcnRUYWcnPjtcbiAgfVxuXG4gIGdldCBjdXJyZW50RW5kVGFnKCk6IFRhZzwnRW5kVGFnJz4ge1xuICAgIGxldCBub2RlID0gdGhpcy5jdXJyZW50Tm9kZTtcbiAgICBhc3NlcnQobm9kZSAmJiBub2RlLnR5cGUgPT09ICdFbmRUYWcnLCAnZXhwZWN0ZWQgZW5kIHRhZycpO1xuICAgIHJldHVybiBub2RlIGFzIFRhZzwnRW5kVGFnJz47XG4gIH1cblxuICBnZXQgY3VycmVudENvbW1lbnQoKTogQVNULkNvbW1lbnRTdGF0ZW1lbnQge1xuICAgIGxldCBub2RlID0gdGhpcy5jdXJyZW50Tm9kZTtcbiAgICBhc3NlcnQobm9kZSAmJiBub2RlLnR5cGUgPT09ICdDb21tZW50U3RhdGVtZW50JywgJ2V4cGVjdGVkIGEgY29tbWVudCcpO1xuICAgIHJldHVybiBub2RlIGFzIEFTVC5Db21tZW50U3RhdGVtZW50O1xuICB9XG5cbiAgZ2V0IGN1cnJlbnREYXRhKCk6IEFTVC5UZXh0Tm9kZSB7XG4gICAgbGV0IG5vZGUgPSB0aGlzLmN1cnJlbnROb2RlO1xuICAgIGFzc2VydChub2RlICYmIG5vZGUudHlwZSA9PT0gJ1RleHROb2RlJywgJ2V4cGVjdGVkIGEgdGV4dCBub2RlJyk7XG4gICAgcmV0dXJuIG5vZGUgYXMgQVNULlRleHROb2RlO1xuXG4gIH1cblxuICBhY2NlcHROb2RlKG5vZGU6IEhhbmRsZWJhcnNBU1QuUHJvZ3JhbSk6IFByb2dyYW07XG4gIGFjY2VwdE5vZGU8VSBleHRlbmRzIEFTVC5Ob2RlPihub2RlOiBIYW5kbGViYXJzQVNULk5vZGUpOiBVO1xuICBhY2NlcHROb2RlKG5vZGU6IEhhbmRsZWJhcnNBU1QuTm9kZSk6IGFueSB7XG4gICAgcmV0dXJuIHRoaXNbbm9kZS50eXBlXShub2RlKTtcbiAgfVxuXG4gIGN1cnJlbnRFbGVtZW50KCk6IEVsZW1lbnQge1xuICAgIHJldHVybiB0aGlzLmVsZW1lbnRTdGFja1t0aGlzLmVsZW1lbnRTdGFjay5sZW5ndGggLSAxXTtcbiAgfVxuXG4gIHNvdXJjZUZvck5vZGUobm9kZTogSGFuZGxlYmFyc0FTVC5Ob2RlLCBlbmROb2RlPzogeyBsb2M6IEhhbmRsZWJhcnNBU1QuU291cmNlTG9jYXRpb24gfSk6IHN0cmluZyB7XG4gICAgbGV0IGZpcnN0TGluZSA9IG5vZGUubG9jLnN0YXJ0LmxpbmUgLSAxO1xuICAgIGxldCBjdXJyZW50TGluZSA9IGZpcnN0TGluZSAtIDE7XG4gICAgbGV0IGZpcnN0Q29sdW1uID0gbm9kZS5sb2Muc3RhcnQuY29sdW1uO1xuICAgIGxldCBzdHJpbmcgPSBbXTtcbiAgICBsZXQgbGluZTtcblxuICAgIGxldCBsYXN0TGluZTogbnVtYmVyO1xuICAgIGxldCBsYXN0Q29sdW1uOiBudW1iZXI7XG5cbiAgICBpZiAoZW5kTm9kZSkge1xuICAgICAgbGFzdExpbmUgPSBlbmROb2RlLmxvYy5lbmQubGluZSAtIDE7XG4gICAgICBsYXN0Q29sdW1uID0gZW5kTm9kZS5sb2MuZW5kLmNvbHVtbjtcbiAgICB9IGVsc2Uge1xuICAgICAgbGFzdExpbmUgPSBub2RlLmxvYy5lbmQubGluZSAtIDE7XG4gICAgICBsYXN0Q29sdW1uID0gbm9kZS5sb2MuZW5kLmNvbHVtbjtcbiAgICB9XG5cbiAgICB3aGlsZSAoY3VycmVudExpbmUgPCBsYXN0TGluZSkge1xuICAgICAgY3VycmVudExpbmUrKztcbiAgICAgIGxpbmUgPSB0aGlzLnNvdXJjZVtjdXJyZW50TGluZV07XG5cbiAgICAgIGlmIChjdXJyZW50TGluZSA9PT0gZmlyc3RMaW5lKSB7XG4gICAgICAgIGlmIChmaXJzdExpbmUgPT09IGxhc3RMaW5lKSB7XG4gICAgICAgICAgc3RyaW5nLnB1c2gobGluZS5zbGljZShmaXJzdENvbHVtbiwgbGFzdENvbHVtbikpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHN0cmluZy5wdXNoKGxpbmUuc2xpY2UoZmlyc3RDb2x1bW4pKTtcbiAgICAgICAgfVxuICAgICAgfSBlbHNlIGlmIChjdXJyZW50TGluZSA9PT0gbGFzdExpbmUpIHtcbiAgICAgICAgc3RyaW5nLnB1c2gobGluZS5zbGljZSgwLCBsYXN0Q29sdW1uKSk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBzdHJpbmcucHVzaChsaW5lKTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICByZXR1cm4gc3RyaW5nLmpvaW4oJ1xcbicpO1xuICB9XG59XG4iXX0=