import SyntaxError from './errors/syntax-error';
// Regex to validate the identifier for block parameters.
// Based on the ID validation regex in Handlebars.
let ID_INVERSE_PATTERN = /[!"#%-,\.\/;->@\[-\^`\{-~]/;
// Checks the element's attributes to see if it uses block params.
// If it does, registers the block params with the program and
// removes the corresponding attributes from the element.
export function parseElementBlockParams(element) {
    let params = parseBlockParams(element);
    if (params) element.blockParams = params;
}
function parseBlockParams(element) {
    let l = element.attributes.length;
    let attrNames = [];
    for (let i = 0; i < l; i++) {
        attrNames.push(element.attributes[i].name);
    }
    let asIndex = attrNames.indexOf('as');
    if (asIndex !== -1 && l > asIndex && attrNames[asIndex + 1].charAt(0) === '|') {
        // Some basic validation, since we're doing the parsing ourselves
        let paramsString = attrNames.slice(asIndex).join(' ');
        if (paramsString.charAt(paramsString.length - 1) !== '|' || paramsString.match(/\|/g).length !== 2) {
            throw new SyntaxError('Invalid block parameters syntax: \'' + paramsString + '\'', element.loc);
        }
        let params = [];
        for (let i = asIndex + 1; i < l; i++) {
            let param = attrNames[i].replace(/\|/g, '');
            if (param !== '') {
                if (ID_INVERSE_PATTERN.test(param)) {
                    throw new SyntaxError('Invalid identifier for block parameters: \'' + param + '\' in \'' + paramsString + '\'', element.loc);
                }
                params.push(param);
            }
        }
        if (params.length === 0) {
            throw new SyntaxError('Cannot use zero block parameters: \'' + paramsString + '\'', element.loc);
        }
        element.attributes = element.attributes.slice(0, asIndex);
        return params;
    }
    return null;
}
export function childrenFor(node) {
    switch (node.type) {
        case 'Program':
            return node.body;
        case 'ElementNode':
            return node.children;
    }
}
export function appendChild(parent, node) {
    childrenFor(parent).push(node);
}
export function isLiteral(path) {
    return path.type === 'StringLiteral' || path.type === 'BooleanLiteral' || path.type === 'NumberLiteral' || path.type === 'NullLiteral' || path.type === 'UndefinedLiteral';
}
export function printLiteral(literal) {
    if (literal.type === 'UndefinedLiteral') {
        return 'undefined';
    } else {
        return JSON.stringify(literal.value);
    }
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidXRpbHMuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi9wYWNrYWdlcy9AZ2xpbW1lci9zeW50YXgvbGliL3V0aWxzLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUVBLE9BQU8sQUFBVyxpQkFBTSxBQUF1QixBQUFDO0FBRWhELEFBQXlEO0FBQ3pELEFBQWtEO0FBRWxELElBQUksQUFBa0IscUJBQUcsQUFBNEIsQUFBQztBQUV0RCxBQUFrRTtBQUNsRSxBQUE4RDtBQUM5RCxBQUF5RDtBQUV6RCxBQUFNLHdDQUFrQyxBQUF3QjtBQUM5RCxRQUFJLEFBQU0sU0FBRyxBQUFnQixpQkFBQyxBQUFPLEFBQUMsQUFBQztBQUN2QyxBQUFFLEFBQUMsUUFBQyxBQUFNLEFBQUMsUUFBQyxBQUFPLFFBQUMsQUFBVyxjQUFHLEFBQU0sQUFBQyxBQUMzQztBQUFDO0FBRUQsMEJBQTBCLEFBQXdCO0FBQ2hELFFBQUksQUFBQyxJQUFHLEFBQU8sUUFBQyxBQUFVLFdBQUMsQUFBTSxBQUFDO0FBQ2xDLFFBQUksQUFBUyxZQUFHLEFBQUUsQUFBQztBQUVuQixBQUFHLEFBQUMsU0FBQyxJQUFJLEFBQUMsSUFBRyxBQUFDLEdBQUUsQUFBQyxJQUFHLEFBQUMsR0FBRSxBQUFDLEFBQUUsS0FBRSxBQUFDO0FBQzNCLEFBQVMsa0JBQUMsQUFBSSxLQUFDLEFBQU8sUUFBQyxBQUFVLFdBQUMsQUFBQyxBQUFDLEdBQUMsQUFBSSxBQUFDLEFBQUMsQUFDN0M7QUFBQztBQUVELFFBQUksQUFBTyxVQUFHLEFBQVMsVUFBQyxBQUFPLFFBQUMsQUFBSSxBQUFDLEFBQUM7QUFFdEMsQUFBRSxBQUFDLFFBQUMsQUFBTyxZQUFLLENBQUMsQUFBQyxLQUFJLEFBQUMsSUFBRyxBQUFPLFdBQUksQUFBUyxVQUFDLEFBQU8sVUFBRyxBQUFDLEFBQUMsR0FBQyxBQUFNLE9BQUMsQUFBQyxBQUFDLE9BQUssQUFBRyxBQUFDLEtBQUMsQUFBQztBQUM5RSxBQUFpRTtBQUNq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TSxlQUFDLEFBQUksS0FBQyxBQUFTLFVBQUMsQUFBTyxRQUFDLEFBQUssQUFBQyxBQUFDLEFBQ3ZDO0FBQUMsQUFDSDtBQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0ICogYXMgQVNUIGZyb20gJy4vdHlwZXMvbm9kZXMnO1xuaW1wb3J0IHsgT3B0aW9uIH0gZnJvbSBcIkBnbGltbWVyL2ludGVyZmFjZXNcIjtcbmltcG9ydCBTeW50YXhFcnJvciBmcm9tICcuL2Vycm9ycy9zeW50YXgtZXJyb3InO1xuXG4vLyBSZWdleCB0byB2YWxpZGF0ZSB0aGUgaWRlbnRpZmllciBmb3IgYmxvY2sgcGFyYW1ldGVycy5cbi8vIEJhc2VkIG9uIHRoZSBJRCB2YWxpZGF0aW9uIHJlZ2V4IGluIEhhbmRsZWJhcnMuXG5cbmxldCBJRF9JTlZFUlNFX1BBVFRFUk4gPSAvWyFcIiMlLSxcXC5cXC87LT5AXFxbLVxcXmBcXHstfl0vO1xuXG4vLyBDaGVja3MgdGhlIGVsZW1lbnQncyBhdHRyaWJ1dGVzIHRvIHNlZSBpZiBpdCB1c2VzIGJsb2NrIHBhcmFtcy5cbi8vIElmIGl0IGRvZXMsIHJlZ2lzdGVycyB0aGUgYmxvY2sgcGFyYW1zIHdpdGggdGhlIHByb2dyYW0gYW5kXG4vLyByZW1vdmVzIHRoZSBjb3JyZXNwb25kaW5nIGF0dHJpYnV0ZXMgZnJvbSB0aGUgZWxlbWVudC5cblxuZXhwb3J0IGZ1bmN0aW9uIHBhcnNlRWxlbWVudEJsb2NrUGFyYW1zKGVsZW1lbnQ6IEFTVC5FbGVtZW50Tm9kZSkge1xuICBsZXQgcGFyYW1zID0gcGFyc2VCbG9ja1BhcmFtcyhlbGVtZW50KTtcbiAgaWYgKHBhcmFtcykgZWxlbWVudC5ibG9ja1BhcmFtcyA9IHBhcmFtcztcbn1cblxuZnVuY3Rpb24gcGFyc2VCbG9ja1BhcmFtcyhlbGVtZW50OiBBU1QuRWxlbWVudE5vZGUpOiBPcHRpb248c3RyaW5nW10+IHtcbiAgbGV0IGwgPSBlbGVtZW50LmF0dHJpYnV0ZXMubGVuZ3RoO1xuICBsZXQgYXR0ck5hbWVzID0gW107XG5cbiAgZm9yIChsZXQgaSA9IDA7IGkgPCBsOyBpKyspIHtcbiAgICBhdHRyTmFtZXMucHVzaChlbGVtZW50LmF0dHJpYnV0ZXNbaV0ubmFtZSk7XG4gIH1cblxuICBsZXQgYXNJbmRleCA9IGF0dHJOYW1lcy5pbmRleE9mKCdhcycpO1xuXG4gIGlmIChhc0luZGV4ICE9PSAtMSAmJiBsID4gYXNJbmRleCAmJiBhdHRyTmFtZXNbYXNJbmRleCArIDFdLmNoYXJBdCgwKSA9PT0gJ3wnKSB7XG4gICAgLy8gU29tZSBiYXNpYyB2YWxpZGF0aW9uLCBzaW5jZSB3ZSdyZSBkb2luZyB0aGUgcGFyc2luZyBvdXJzZWx2ZXNcbiAgICBsZXQgcGFyYW1zU3RyaW5nID0gYXR0ck5hbWVzLnNsaWNlKGFzSW5kZXgpLmpvaW4oJyAnKTtcbiAgICBpZiAocGFyYW1zU3RyaW5nLmNoYXJBdChwYXJhbXNTdHJpbmcubGVuZ3RoIC0gMSkgIT09ICd8JyB8fCBwYXJhbXNTdHJpbmcubWF0Y2goL1xcfC9nKSEubGVuZ3RoICE9PSAyKSB7XG4gICAgICB0aHJvdyBuZXcgU3ludGF4RXJyb3IoJ0ludmFsaWQgYmxvY2sgcGFyYW1ldGVycyBzeW50YXg6IFxcJycgKyBwYXJhbXNTdHJpbmcgKyAnXFwnJywgZWxlbWVudC5sb2MpO1xuICAgIH1cblxuICAgIGxldCBwYXJhbXMgPSBbXTtcbiAgICBmb3IgKGxldCBpID0gYXNJbmRleCArIDE7IGkgPCBsOyBpKyspIHtcbiAgICAgIGxldCBwYXJhbSA9IGF0dHJOYW1lc1tpXS5yZXBsYWNlKC9cXHwvZywgJycpO1xuICAgICAgaWYgKHBhcmFtICE9PSAnJykge1xuICAgICAgICBpZiAoSURfSU5WRVJTRV9QQVRURVJOLnRlc3QocGFyYW0pKSB7XG4gICAgICAgICAgdGhyb3cgbmV3IFN5bnRheEVycm9yKCdJbnZhbGlkIGlkZW50aWZpZXIgZm9yIGJsb2NrIHBhcmFtZXRlcnM6IFxcJycgKyBwYXJhbSArICdcXCcgaW4gXFwnJyArIHBhcmFtc1N0cmluZyArICdcXCcnLCBlbGVtZW50LmxvYyk7XG4gICAgICAgIH1cbiAgICAgICAgcGFyYW1zLnB1c2gocGFyYW0pO1xuICAgICAgfVxuICAgIH1cblxuICAgIGlmIChwYXJhbXMubGVuZ3RoID09PSAwKSB7XG4gICAgICB0aHJvdyBuZXcgU3ludGF4RXJyb3IoJ0Nhbm5vdCB1c2UgemVybyBibG9jayBwYXJhbWV0ZXJzOiBcXCcnICsgcGFyYW1zU3RyaW5nICsgJ1xcJycsIGVsZW1lbnQubG9jKTtcbiAgICB9XG5cbiAgICBlbGVtZW50LmF0dHJpYnV0ZXMgPSBlbGVtZW50LmF0dHJpYnV0ZXMuc2xpY2UoMCwgYXNJbmRleCk7XG4gICAgcmV0dXJuIHBhcmFtcztcbiAgfVxuXG4gIHJldHVybiBudWxsO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gY2hpbGRyZW5Gb3Iobm9kZTogQVNULlByb2dyYW0gfCBBU1QuRWxlbWVudE5vZGUpOiBBU1QuU3RhdGVtZW50W10ge1xuICBzd2l0Y2ggKG5vZGUudHlwZSkge1xuICAgIGNhc2UgJ1Byb2dyYW0nOiByZXR1cm4gbm9kZS5ib2R5O1xuICAgIGNhc2UgJ0VsZW1lbnROb2RlJzogcmV0dXJuIG5vZGUuY2hpbGRyZW47XG4gIH1cbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGFwcGVuZENoaWxkKHBhcmVudDogQVNULlByb2dyYW0gfCBBU1QuRWxlbWVudE5vZGUsIG5vZGU6IEFTVC5TdGF0ZW1lbnQpIHtcbiAgY2hpbGRyZW5Gb3IocGFyZW50KS5wdXNoKG5vZGUpO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gaXNMaXRlcmFsKHBhdGg6IEFTVC5QYXRoRXhwcmVzc2lvbiB8IEFTVC5MaXRlcmFsKTogcGF0aCBpcyBBU1QuTGl0ZXJhbCB7XG4gIHJldHVybiBwYXRoLnR5cGUgPT09ICdTdHJpbmdMaXRlcmFsJ1xuICAgICAgfHwgcGF0aC50eXBlID09PSAnQm9vbGVhbkxpdGVyYWwnXG4gICAgICB8fCBwYXRoLnR5cGUgPT09ICdOdW1iZXJMaXRlcmFsJ1xuICAgICAgfHwgcGF0aC50eXBlID09PSAnTnVsbExpdGVyYWwnXG4gICAgICB8fCBwYXRoLnR5cGUgPT09ICdVbmRlZmluZWRMaXRlcmFsJztcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIHByaW50TGl0ZXJhbChsaXRlcmFsOiBBU1QuTGl0ZXJhbCk6IHN0cmluZyB7XG4gIGlmIChsaXRlcmFsLnR5cGUgPT09ICdVbmRlZmluZWRMaXRlcmFsJykge1xuICAgIHJldHVybiAndW5kZWZpbmVkJztcbiAgfSBlbHNlIHtcbiAgICByZXR1cm4gSlNPTi5zdHJpbmdpZnkobGl0ZXJhbC52YWx1ZSk7XG4gIH1cbn1cbiJdfQ==