'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.default = build;

var _nodes = require('../types/nodes');

var HBS = _interopRequireWildcard(_nodes);

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }

function unreachable() {
    throw new Error('unreachable');
}
function build(ast) {
    if (!ast) {
        return '';
    }
    var output = [];
    switch (ast.type) {
        case 'Program':
            {
                var chainBlock = ast['chained'] && ast.body[0];
                if (chainBlock) {
                    chainBlock['chained'] = true;
                }
                var body = buildEach(ast.body).join('');
                output.push(body);
            }
            break;
        case 'ElementNode':
            output.push('<', ast.tag);
            if (ast.attributes.length) {
                output.push(' ', buildEach(ast.attributes).join(' '));
            }
            if (ast.modifiers.length) {
                output.push(' ', buildEach(ast.modifiers).join(' '));
            }
            if (ast.comments.length) {
                output.push(' ', buildEach(ast.comments).join(' '));
            }
            output.push('>');
            output.push.apply(output, buildEach(ast.children));
            output.push('</', ast.tag, '>');
            break;
        case 'AttrNode':
            output.push(ast.name, '=');
            var value = build(ast.value);
            if (ast.value.type === 'TextNode') {
                output.push('"', value, '"');
            } else {
                output.push(value);
            }
            break;
        case 'ConcatStatement':
            output.push('"');
            ast.parts.forEach(function (node) {
                if (node.type === 'StringLiteral') {
                    output.push(node.original);
                } else {
                    output.push(build(node));
                }
            });
            output.push('"');
            break;
        case 'TextNode':
            output.push(ast.chars);
            break;
        case 'MustacheStatement':
            {
                output.push(compactJoin(['{{', pathParams(ast), '}}']));
            }
            break;
        case 'MustacheCommentStatement':
            {
                output.push(compactJoin(['{{!--', ast.value, '--}}']));
            }
            break;
        case 'ElementModifierStatement':
            {
                output.push(compactJoin(['{{', pathParams(ast), '}}']));
            }
            break;
        case 'PathExpression':
            output.push(ast.original);
            break;
        case 'SubExpression':
            {
                output.push('(', pathParams(ast), ')');
            }
            break;
        case 'BooleanLiteral':
            output.push(ast.value ? 'true' : 'false');
            break;
        case 'BlockStatement':
            {
                var lines = [];
                if (ast['chained']) {
                    lines.push(['{{else ', pathParams(ast), '}}'].join(''));
                } else {
                    lines.push(openBlock(ast));
                }
                lines.push(build(ast.program));
                if (ast.inverse) {
                    if (!ast.inverse['chained']) {
                        lines.push('{{else}}');
                    }
                    lines.push(build(ast.inverse));
                }
                if (!ast['chained']) {
                    lines.push(closeBlock(ast));
                }
                output.push(lines.join(''));
            }
            break;
        case 'PartialStatement':
            {
                output.push(compactJoin(['{{>', pathParams(ast), '}}']));
            }
            break;
        case 'CommentStatement':
            {
                output.push(compactJoin(['<!--', ast.value, '-->']));
            }
            break;
        case 'StringLiteral':
            {
                output.push('"' + ast.value + '"');
            }
            break;
        case 'NumberLiteral':
            {
                output.push(String(ast.value));
            }
            break;
        case 'UndefinedLiteral':
            {
                output.push('undefined');
            }
            break;
        case 'NullLiteral':
            {
                output.push('null');
            }
            break;
        case 'Hash':
            {
                output.push(ast.pairs.map(function (pair) {
                    return build(pair);
                }).join(' '));
            }
            break;
        case 'HashPair':
            {
                output.push(ast.key + '=' + build(ast.value));
            }
            break;
    }
    return output.join('');
}
function compact(array) {
    var newArray = [];
    array.forEach(function (a) {
        if (typeof a !== 'undefined' && a !== null && a !== '') {
            newArray.push(a);
        }
    });
    return newArray;
}
function buildEach(asts) {
    return asts.map(build);
}
function pathParams(ast) {
    var path = void 0;
    switch (ast.type) {
        case 'MustacheStatement':
        case 'SubExpression':
        case 'ElementModifierStatement':
        case 'BlockStatement':
            if (HBS.isLiteral(ast.path)) {
                return String(ast.path.value);
            }
            path = build(ast.path);
            break;
        case 'PartialStatement':
            path = build(ast.name);
            break;
        default:
            return unreachable();
    }
    return compactJoin([path, buildEach(ast.params).join(' '), build(ast.hash)], ' ');
}
function compactJoin(array, delimiter) {
    return compact(array).join(delimiter || '');
}
function blockParams(block) {
    var params = block.program.blockParams;
    if (params.length) {
        return ' as |' + params.join(' ') + '|';
    }
    return null;
}
function openBlock(block) {
    return ['{{#', pathParams(block), blockParams(block), '}}'].join('');
}
function closeBlock(block) {
    return ['{{/', build(block.path), '}}'].join('');
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicHJpbnQuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi9wYWNrYWdlcy9AZ2xpbW1lci9zeW50YXgvbGliL2dlbmVyYXRpb24vcHJpbnQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7OztBQUNBLEFBQU87O0lBQUssQUFBRyxBQUFNLEFBQWdCLEFBQUM7Ozs7QUFFdEMsdUJBQ0U7VUFBTSxJQUFJLEFBQUssTUFBQyxBQUFhLEFBQUMsQUFBQyxBQUNqQyxBQUFDO0FBRUQsQUFBTSxBQUFDLEFBQU87ZUFBZ0IsQUFBYSxLQUN6QyxBQUFFO1FBQUMsQ0FBQyxBQUFHLEFBQUMsS0FBQyxBQUFDLEFBQ1IsQUFBTTtlQUFDLEFBQUUsQUFBQyxBQUNaLEFBQUMsQUFDRDs7UUFBTSxBQUFNLFNBQWEsQUFBRSxBQUFDLEFBRTVCLEFBQU07WUFBQyxBQUFHLElBQUMsQUFBSSxBQUFDLEFBQUMsQUFBQyxBQUNoQjthQUFLLEFBQVMsQUFBRSxBQUFDLEFBQ2Y7O29CQUFNLEFBQVUsYUFBRyxBQUFHLElBQUMsQUFBUyxBQUFDLGNBQUksQUFBRyxJQUFDLEFBQUksS0FBQyxBQUFDLEFBQUMsQUFBQyxBQUNqRCxBQUFFO29CQUFDLEFBQVUsQUFBQyxZQUFDLEFBQUMsQUFDZCxBQUFVOytCQUFDLEFBQVMsQUFBQyxhQUFHLEFBQUksQUFBQyxBQUMvQixBQUFDLEFBQ0Q7O29CQUFNLEFBQUksT0FBRyxBQUFTLFVBQUMsQUFBRyxJQUFDLEFBQUksQUFBQyxNQUFDLEFBQUksS0FBQyxBQUFFLEFBQUMsQUFBQyxBQUMxQyxBQUFNO3VCQUFDLEFBQUksS0FBQyxBQUFJLEFBQUMsQUFBQyxBQUNwQixBQUFDLEFBQ0QsQUFBSyxBQUFDO0FBQ047O2FBQUssQUFBYSxBQUNoQixBQUFNO21CQUFDLEFBQUksS0FBQyxBQUFHLEtBQUUsQUFBRyxJQUFDLEFBQUcsQUFBQyxBQUFDLEFBQzFCLEFBQUU7Z0JBQUMsQUFBRyxJQUFDLEFBQVUsV0FBQyxB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QXVCLE9BQUUsQUFBa0IsV0FDOUQsQUFBTTtXQUFDLEFBQU8sUUFBQyxBQUFLLEFBQUMsT0FBQyxBQUFJLEtBQUMsQUFBUyxhQUFJLEFBQUUsQUFBQyxBQUFDLEFBQzlDLEFBQUM7O0FBRUQscUJBQXFCLEFBQXlCLE9BQzVDO1FBQU0sQUFBTSxTQUFHLEFBQUssTUFBQyxBQUFPLFFBQUMsQUFBVyxBQUFDLEFBQ3pDLEFBQUU7UUFBQyxBQUFNLE9BQUMsQUFBTSxBQUFDLFFBQUMsQUFBQyxBQUNqQixBQUFNLEFBQUM7eUJBQVEsQUFBTSxPQUFDLEFBQUksS0FBQyxBQUFHLEFBQUMsQUFBRyxBQUFDLEFBQ3JDLEFBQUMsT0FFRCxBQUFNOztXQUFDLEFBQUksQUFBQyxBQUNkLEFBQUM7O0FBRUQsbUJBQW1CLEFBQXlCLE9BQzFDLEFBQU07V0FBQyxDQUFDLEFBQUssT0FBRSxBQUFVLFdBQUMsQUFBSyxBQUFDLFFBQUUsQUFBVyxZQUFDLEFBQUssQUFBQyxRQUFFLEFBQUksQUFBQyxNQUFDLEFBQUksS0FBQyxBQUFFLEFBQUMsQUFBQyxBQUN2RSxBQUFDOztBQUVELG9CQUFvQixBQUFVLE9BQzVCLEFBQU07V0FBQyxDQUFDLEFBQUssT0FBRSxBQUFLLE1BQUMsQUFBSyxNQUFDLEFBQUksQUFBQyxPQUFFLEFBQUksQUFBQyxNQUFDLEFBQUksS0FBQyxBQUFFLEFBQUMsQUFBQyxBQUNuRCxBQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgT3B0aW9uIH0gZnJvbSAnQGdsaW1tZXIvaW50ZXJmYWNlcyc7XG5pbXBvcnQgKiBhcyBIQlMgZnJvbSAnLi4vdHlwZXMvbm9kZXMnO1xuXG5mdW5jdGlvbiB1bnJlYWNoYWJsZSgpOiBuZXZlciB7XG4gIHRocm93IG5ldyBFcnJvcigndW5yZWFjaGFibGUnKTtcbn1cblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gYnVpbGQoYXN0OiBIQlMuTm9kZSk6IHN0cmluZyB7XG4gIGlmKCFhc3QpIHtcbiAgICByZXR1cm4gJyc7XG4gIH1cbiAgY29uc3Qgb3V0cHV0OiBzdHJpbmdbXSA9IFtdO1xuXG4gIHN3aXRjaChhc3QudHlwZSkge1xuICAgIGNhc2UgJ1Byb2dyYW0nOiB7XG4gICAgICBjb25zdCBjaGFpbkJsb2NrID0gYXN0WydjaGFpbmVkJ10gJiYgYXN0LmJvZHlbMF07XG4gICAgICBpZihjaGFpbkJsb2NrKSB7XG4gICAgICAgIGNoYWluQmxvY2tbJ2NoYWluZWQnXSA9IHRydWU7XG4gICAgICB9XG4gICAgICBjb25zdCBib2R5ID0gYnVpbGRFYWNoKGFzdC5ib2R5KS5qb2luKCcnKTtcbiAgICAgIG91dHB1dC5wdXNoKGJvZHkpO1xuICAgIH1cbiAgICBicmVhaztcbiAgICBjYXNlICdFbGVtZW50Tm9kZSc6XG4gICAgICBvdXRwdXQucHVzaCgnPCcsIGFzdC50YWcpO1xuICAgICAgaWYoYXN0LmF0dHJpYnV0ZXMubGVuZ3RoKSB7XG4gICAgICAgIG91dHB1dC5wdXNoKCcgJywgYnVpbGRFYWNoKGFzdC5hdHRyaWJ1dGVzKS5qb2luKCcgJykpO1xuICAgICAgfVxuICAgICAgaWYoYXN0Lm1vZGlmaWVycy5sZW5ndGgpIHtcbiAgICAgICAgb3V0cHV0LnB1c2goJyAnLCBidWlsZEVhY2goYXN0Lm1vZGlmaWVycykuam9pbignICcpKTtcbiAgICAgIH1cbiAgICAgIGlmKGFzdC5jb21tZW50cy5sZW5ndGgpIHtcbiAgICAgICAgb3V0cHV0LnB1c2goJyAnLCBidWlsZEVhY2goYXN0LmNvbW1lbnRzKS5qb2luKCcgJykpO1xuICAgICAgfVxuICAgICAgb3V0cHV0LnB1c2goJz4nKTtcbiAgICAgIG91dHB1dC5wdXNoLmFwcGx5KG91dHB1dCwgYnVpbGRFYWNoKGFzdC5jaGlsZHJlbikpO1xuICAgICAgb3V0cHV0LnB1c2goJzwvJywgYXN0LnRhZywgJz4nKTtcbiAgICBicmVhaztcbiAgICBjYXNlICdBdHRyTm9kZSc6XG4gICAgICBvdXRwdXQucHVzaChhc3QubmFtZSwgJz0nKTtcbiAgICAgIGNvbnN0IHZhbHVlID0gYnVpbGQoYXN0LnZhbHVlKTtcbiAgICAgIGlmKGFzdC52YWx1ZS50eXBlID09PSAnVGV4dE5vZGUnKSB7XG4gICAgICAgIG91dHB1dC5wdXNoKCdcIicsIHZhbHVlLCAnXCInKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIG91dHB1dC5wdXNoKHZhbHVlKTtcbiAgICAgIH1cbiAgICBicmVhaztcbiAgICBjYXNlICdDb25jYXRTdGF0ZW1lbnQnOlxuICAgICAgb3V0cHV0LnB1c2goJ1wiJyk7XG4gICAgICBhc3QucGFydHMuZm9yRWFjaCgobm9kZTogYW55KSA9PiB7XG4gICAgICAgIGlmKG5vZGUudHlwZSA9PT0gJ1N0cmluZ0xpdGVyYWwnKSB7XG4gICAgICAgICAgb3V0cHV0LnB1c2gobm9kZS5vcmlnaW5hbCk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgb3V0cHV0LnB1c2goYnVpbGQobm9kZSkpO1xuICAgICAgICB9XG4gICAgICB9KTtcbiAgICAgIG91dHB1dC5wdXNoKCdcIicpO1xuICAgIGJyZWFrO1xuICAgIGNhc2UgJ1RleHROb2RlJzpcbiAgICAgIG91dHB1dC5wdXNoKGFzdC5jaGFycyk7XG4gICAgYnJlYWs7XG4gICAgY2FzZSAnTXVzdGFjaGVTdGF0ZW1lbnQnOiB7XG4gICAgICBvdXRwdXQucHVzaChjb21wYWN0Sm9pbihbJ3t7JywgcGF0aFBhcmFtcyhhc3QpLCAnfX0nXSkpO1xuICAgIH1cbiAgICBicmVhaztcbiAgICBjYXNlICdNdXN0YWNoZUNvbW1lbnRTdGF0ZW1lbnQnOiB7XG4gICAgICBvdXRwdXQucHVzaChjb21wYWN0Sm9pbihbJ3t7IS0tJywgYXN0LnZhbHVlLCAnLS19fSddKSk7XG4gICAgfVxuICAgIGJyZWFrO1xuICAgIGNhc2UgJ0VsZW1lbnRNb2RpZmllclN0YXRlbWVudCc6IHtcbiAgICAgIG91dHB1dC5wdXNoKGNvbXBhY3RKb2luKFsne3snLCBwYXRoUGFyYW1zKGFzdCksICd9fSddKSk7XG4gICAgfVxuICAgIGJyZWFrO1xuICAgIGNhc2UgJ1BhdGhFeHByZXNzaW9uJzpcbiAgICAgIG91dHB1dC5wdXNoKGFzdC5vcmlnaW5hbCk7XG4gICAgYnJlYWs7XG4gICAgY2FzZSAnU3ViRXhwcmVzc2lvbic6IHtcbiAgICAgIG91dHB1dC5wdXNoKCcoJywgcGF0aFBhcmFtcyhhc3QpLCAnKScpO1xuICAgIH1cbiAgICBicmVhaztcbiAgICBjYXNlICdCb29sZWFuTGl0ZXJhbCc6XG4gICAgICBvdXRwdXQucHVzaChhc3QudmFsdWUgPyAndHJ1ZScgOiAnZmFsc2UnKTtcbiAgICBicmVhaztcbiAgICBjYXNlICdCbG9ja1N0YXRlbWVudCc6IHtcbiAgICAgIGNvbnN0IGxpbmVzOiBzdHJpbmdbXSA9IFtdO1xuXG4gICAgICBpZihhc3RbJ2NoYWluZWQnXSl7XG4gICAgICAgIGxpbmVzLnB1c2goWyd7e2Vsc2UgJywgcGF0aFBhcmFtcyhhc3QpLCAnfX0nXS5qb2luKCcnKSk7XG4gICAgICB9ZWxzZXtcbiAgICAgICAgbGluZXMucHVzaChvcGVuQmxvY2soYXN0KSk7XG4gICAgICB9XG5cbiAgICAgIGxpbmVzLnB1c2goYnVpbGQoYXN0LnByb2dyYW0pKTtcblxuICAgICAgaWYoYXN0LmludmVyc2UpIHtcbiAgICAgICAgaWYoIWFzdC5pbnZlcnNlWydjaGFpbmVkJ10pe1xuICAgICAgICAgIGxpbmVzLnB1c2goJ3t7ZWxzZX19Jyk7XG4gICAgICAgIH1cbiAgICAgICAgbGluZXMucHVzaChidWlsZChhc3QuaW52ZXJzZSkpO1xuICAgICAgfVxuXG4gICAgICBpZighYXN0WydjaGFpbmVkJ10pe1xuICAgICAgICBsaW5lcy5wdXNoKGNsb3NlQmxvY2soYXN0KSk7XG4gICAgICB9XG5cbiAgICAgIG91dHB1dC5wdXNoKGxpbmVzLmpvaW4oJycpKTtcbiAgICB9XG4gICAgYnJlYWs7XG4gICAgY2FzZSAnUGFydGlhbFN0YXRlbWVudCc6IHtcbiAgICAgIG91dHB1dC5wdXNoKGNvbXBhY3RKb2luKFsne3s+JywgcGF0aFBhcmFtcyhhc3QpLCAnfX0nXSkpO1xuICAgIH1cbiAgICBicmVhaztcbiAgICBjYXNlICdDb21tZW50U3RhdGVtZW50Jzoge1xuICAgICAgb3V0cHV0LnB1c2goY29tcGFjdEpvaW4oWyc8IS0tJywgYXN0LnZhbHVlLCAnLS0+J10pKTtcbiAgICB9XG4gICAgYnJlYWs7XG4gICAgY2FzZSAnU3RyaW5nTGl0ZXJhbCc6IHtcbiAgICAgIG91dHB1dC5wdXNoKGBcIiR7YXN0LnZhbHVlfVwiYCk7XG4gICAgfVxuICAgIGJyZWFrO1xuICAgIGNhc2UgJ051bWJlckxpdGVyYWwnOiB7XG4gICAgICBvdXRwdXQucHVzaChTdHJpbmcoYXN0LnZhbHVlKSk7XG4gICAgfVxuICAgIGJyZWFrO1xuICAgIGNhc2UgJ1VuZGVmaW5lZExpdGVyYWwnOiB7XG4gICAgICBvdXRwdXQucHVzaCgndW5kZWZpbmVkJyk7XG4gICAgfVxuICAgIGJyZWFrO1xuICAgIGNhc2UgJ051bGxMaXRlcmFsJzoge1xuICAgICAgb3V0cHV0LnB1c2goJ251bGwnKTtcbiAgICB9XG4gICAgYnJlYWs7XG4gICAgY2FzZSAnSGFzaCc6IHtcbiAgICAgIG91dHB1dC5wdXNoKGFzdC5wYWlycy5tYXAocGFpciA9PiB7XG4gICAgICAgIHJldHVybiBidWlsZChwYWlyKTtcbiAgICAgIH0pLmpvaW4oJyAnKSk7XG4gICAgfVxuICAgIGJyZWFrO1xuICAgIGNhc2UgJ0hhc2hQYWlyJzoge1xuICAgICAgb3V0cHV0LnB1c2goYCR7YXN0LmtleX09JHtidWlsZChhc3QudmFsdWUpfWApO1xuICAgIH1cbiAgICBicmVhaztcbiAgfVxuICByZXR1cm4gb3V0cHV0LmpvaW4oJycpO1xufVxuXG5mdW5jdGlvbiBjb21wYWN0KGFycmF5OiBPcHRpb248c3RyaW5nPltdKTogc3RyaW5nW10ge1xuICBjb25zdCBuZXdBcnJheTogYW55W10gPSBbXTtcbiAgYXJyYXkuZm9yRWFjaChhID0+IHtcbiAgICBpZih0eXBlb2YoYSkgIT09ICd1bmRlZmluZWQnICYmIGEgIT09IG51bGwgJiYgYSAhPT0gJycpIHtcbiAgICAgIG5ld0FycmF5LnB1c2goYSk7XG4gICAgfVxuICB9KTtcbiAgcmV0dXJuIG5ld0FycmF5O1xufVxuXG5mdW5jdGlvbiBidWlsZEVhY2goYXN0czogSEJTLk5vZGVbXSk6IHN0cmluZ1tdIHtcbiAgcmV0dXJuIGFzdHMubWFwKGJ1aWxkKTtcbn1cblxuZnVuY3Rpb24gcGF0aFBhcmFtcyhhc3Q6IEhCUy5Ob2RlKTogc3RyaW5nIHtcbiAgbGV0IHBhdGg6IHN0cmluZztcblxuICBzd2l0Y2ggKGFzdC50eXBlKSB7XG4gICAgY2FzZSAnTXVzdGFjaGVTdGF0ZW1lbnQnOlxuICAgIGNhc2UgJ1N1YkV4cHJlc3Npb24nOlxuICAgIGNhc2UgJ0VsZW1lbnRNb2RpZmllclN0YXRlbWVudCc6XG4gICAgY2FzZSAnQmxvY2tTdGF0ZW1lbnQnOlxuICAgICAgaWYgKEhCUy5pc0xpdGVyYWwoYXN0LnBhdGgpKSB7XG4gICAgICAgIHJldHVybiBTdHJpbmcoYXN0LnBhdGgudmFsdWUpO1xuICAgICAgfVxuXG4gICAgICBwYXRoID0gYnVpbGQoYXN0LnBhdGgpO1xuICAgICAgYnJlYWs7XG4gICAgY2FzZSAnUGFydGlhbFN0YXRlbWVudCc6XG4gICAgICBwYXRoID0gYnVpbGQoYXN0Lm5hbWUpO1xuICAgICAgYnJlYWs7XG4gICAgZGVmYXVsdDpcbiAgICAgIHJldHVybiB1bnJlYWNoYWJsZSgpO1xuICB9XG5cbiAgcmV0dXJuIGNvbXBhY3RKb2luKFtwYXRoLCBidWlsZEVhY2goYXN0LnBhcmFtcykuam9pbignICcpLCBidWlsZChhc3QuaGFzaCldLCAnICcpO1xufVxuXG5mdW5jdGlvbiBjb21wYWN0Sm9pbihhcnJheTogT3B0aW9uPHN0cmluZz5bXSwgZGVsaW1pdGVyPzogc3RyaW5nKTogc3RyaW5nIHtcbiAgcmV0dXJuIGNvbXBhY3QoYXJyYXkpLmpvaW4oZGVsaW1pdGVyIHx8ICcnKTtcbn1cblxuZnVuY3Rpb24gYmxvY2tQYXJhbXMoYmxvY2s6IEhCUy5CbG9ja1N0YXRlbWVudCk6IE9wdGlvbjxzdHJpbmc+IHtcbiAgY29uc3QgcGFyYW1zID0gYmxvY2sucHJvZ3JhbS5ibG9ja1BhcmFtcztcbiAgaWYocGFyYW1zLmxlbmd0aCkge1xuICAgIHJldHVybiBgIGFzIHwke3BhcmFtcy5qb2luKCcgJyl9fGA7XG4gIH1cblxuICByZXR1cm4gbnVsbDtcbn1cblxuZnVuY3Rpb24gb3BlbkJsb2NrKGJsb2NrOiBIQlMuQmxvY2tTdGF0ZW1lbnQpOiBzdHJpbmcge1xuICByZXR1cm4gWyd7eyMnLCBwYXRoUGFyYW1zKGJsb2NrKSwgYmxvY2tQYXJhbXMoYmxvY2spLCAnfX0nXS5qb2luKCcnKTtcbn1cblxuZnVuY3Rpb24gY2xvc2VCbG9jayhibG9jazogYW55KTogc3RyaW5nIHtcbiAgcmV0dXJuIFsne3svJywgYnVpbGQoYmxvY2sucGF0aCksICd9fSddLmpvaW4oJycpO1xufVxuIl19