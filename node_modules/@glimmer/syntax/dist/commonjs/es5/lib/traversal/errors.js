"use strict";

Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.cannotRemoveNode = cannotRemoveNode;
exports.cannotReplaceNode = cannotReplaceNode;
exports.cannotReplaceOrRemoveInKeyHandlerYet = cannotReplaceOrRemoveInKeyHandlerYet;
var TraversalError = function () {
    TraversalError.prototype = Object.create(Error.prototype);
    TraversalError.prototype.constructor = TraversalError;
    function TraversalError(message, node, parent, key) {
        var error = Error.call(this, message);
        this.key = key;
        this.message = message;
        this.node = node;
        this.parent = parent;
        this.stack = error.stack;
    }
    return TraversalError;
}();
exports.default = TraversalError;
function cannotRemoveNode(node, parent, key) {
    return new TraversalError("Cannot remove a node unless it is part of an array", node, parent, key);
}
function cannotReplaceNode(node, parent, key) {
    return new TraversalError("Cannot replace a node with multiple nodes unless it is part of an array", node, parent, key);
}
function cannotReplaceOrRemoveInKeyHandlerYet(node, key) {
    return new TraversalError("Replacing and removing in key handlers is not yet supported.", node, null, key);
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZXJyb3JzLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vLi4vcGFja2FnZXMvQGdsaW1tZXIvc3ludGF4L2xpYi90cmF2ZXJzYWwvZXJyb3JzLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7Ozs7O0FBZUEsSUFBTSxBQUFjLEFBQThCLDZCQUNoRCxBQUFjO21CQUFDLEFBQVMsWUFBRyxBQUFNLE9BQUMsQUFBTSxPQUFDLEFBQUssTUFBQyxBQUFTLEFBQUMsQUFBQyxBQUMxRCxBQUFjO21CQUFDLEFBQVMsVUFBQyxBQUFXLGNBQUcsQUFBYyxBQUFDLEFBRXREOzRCQUE4QyxBQUFlLFNBQUUsQUFBYyxNQUFFLEFBQXdCLFFBQUUsQUFBVyxLQUNsSDtZQUFJLEFBQUssUUFBRyxBQUFLLE1BQUMsQUFBSSxLQUFDLEFBQUksTUFBRSxBQUFPLEFBQUMsQUFBQyxBQUV0QyxBQUFJO2FBQUMsQUFBRyxNQUFHLEFBQUcsQUFBQyxBQUNmLEFBQUk7YUFBQyxBQUFPLFVBQUcsQUFBTyxBQUFDLEFBQ3ZCLEFBQUk7YUFBQyxBQUFJLE9BQUcsQUFBSSxBQUFDLEFBQ2pCLEFBQUk7YUFBQyxBQUFNLFNBQUcsQUFBTSxBQUFDLEFBQ3JCLEFBQUk7YUFBQyxBQUFLLFFBQUcsQUFBSyxNQUFDLEFBQUssQUFBQyxBQUMzQixBQUFDLEFBRUQsQUFBTTs7V0FBQyxBQUFxQixBQUFDLEFBQy9CLEFBQUMsQUFBRSxBQUFDLEFBQUMsQUFmOEM7QUFpQm5EO2tCQUFlLEFBQWMsQUFBQyxBQUU5QixBQUFNOzBCQUEyQixBQUFjLE1BQUUsQUFBZSxRQUFFLEFBQVcsS0FDM0UsQUFBTTtXQUFDLElBQUksQUFBYyxlQUN2QixBQUFvRCxzREFDcEQsQUFBSSxNQUFFLEFBQU0sUUFBRSxBQUFHLEFBQ2xCLEFBQUMsQUFDSixBQUFDO0FBRUQsQUFBTTsyQkFBNEIsQUFBYyxNQUFFLEFBQWdCLFFBQUUsQUFBVyxLQUM3RSxBQUFNO1dBQUMsSUFBSSxBQUFjLGVBQ3ZCLEFBQXlFLDJFQUN6RSxBQUFJLE1BQUUsQUFBTSxRQUFFLEFBQUcsQUFDbEIsQUFBQyxBQUNKLEFBQUM7QUFFRCxBQUFNOzhDQUErQyxBQUFjLE1BQUUsQUFBVyxLQUM5RSxBQUFNO1dBQUMsSUFBSSxBQUFjLGVBQ3ZCLEFBQThELGdFQUM5RCxBQUFJLE1BQUUsQUFBSSxNQUFFLEFBQUcsQUFDaEIsQUFBQyxBQUNKLEFBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgKiBhcyBBU1QgZnJvbSAnLi4vdHlwZXMvbm9kZXMnO1xuaW1wb3J0IHsgT3B0aW9uIH0gZnJvbSAnQGdsaW1tZXIvaW50ZXJmYWNlcyc7XG5cbmV4cG9ydCBpbnRlcmZhY2UgVHJhdmVyc2FsRXJyb3IgZXh0ZW5kcyBFcnJvciB7XG4gIGNvbnN0cnVjdG9yOiBUcmF2ZXJzYWxFcnJvckNvbnN0cnVjdG9yO1xuICBrZXk6IHN0cmluZztcbiAgbm9kZTogQVNULk5vZGU7XG4gIHBhcmVudDogT3B0aW9uPEFTVC5Ob2RlPjtcbn1cblxuZXhwb3J0IGludGVyZmFjZSBUcmF2ZXJzYWxFcnJvckNvbnN0cnVjdG9yIHtcbiAgbmV3IChtZXNzYWdlOiBzdHJpbmcsIG5vZGU6IEFTVC5Ob2RlLCBwYXJlbnQ6IE9wdGlvbjxBU1QuTm9kZT4sIGtleTogc3RyaW5nKTogVHJhdmVyc2FsRXJyb3I7XG4gIHJlYWRvbmx5IHByb3RvdHlwZTogVHJhdmVyc2FsRXJyb3I7XG59XG5cbmNvbnN0IFRyYXZlcnNhbEVycm9yOiBUcmF2ZXJzYWxFcnJvckNvbnN0cnVjdG9yID0gKGZ1bmN0aW9uICgpIHtcbiAgVHJhdmVyc2FsRXJyb3IucHJvdG90eXBlID0gT2JqZWN0LmNyZWF0ZShFcnJvci5wcm90b3R5cGUpO1xuICBUcmF2ZXJzYWxFcnJvci5wcm90b3R5cGUuY29uc3RydWN0b3IgPSBUcmF2ZXJzYWxFcnJvcjtcblxuICBmdW5jdGlvbiBUcmF2ZXJzYWxFcnJvcih0aGlzOiBUcmF2ZXJzYWxFcnJvciwgbWVzc2FnZTogc3RyaW5nLCBub2RlOiBBU1QuTm9kZSwgcGFyZW50OiBPcHRpb248QVNULk5vZGU+LCBrZXk6IHN0cmluZykge1xuICAgIGxldCBlcnJvciA9IEVycm9yLmNhbGwodGhpcywgbWVzc2FnZSk7XG5cbiAgICB0aGlzLmtleSA9IGtleTtcbiAgICB0aGlzLm1lc3NhZ2UgPSBtZXNzYWdlO1xuICAgIHRoaXMubm9kZSA9IG5vZGU7XG4gICAgdGhpcy5wYXJlbnQgPSBwYXJlbnQ7XG4gICAgdGhpcy5zdGFjayA9IGVycm9yLnN0YWNrO1xuICB9XG5cbiAgcmV0dXJuIFRyYXZlcnNhbEVycm9yIGFzIGFueTtcbn0oKSk7XG5cbmV4cG9ydCBkZWZhdWx0IFRyYXZlcnNhbEVycm9yO1xuXG5leHBvcnQgZnVuY3Rpb24gY2Fubm90UmVtb3ZlTm9kZShub2RlOiBBU1QuTm9kZSwgcGFyZW50OkFTVC5Ob2RlLCBrZXk6IHN0cmluZykge1xuICByZXR1cm4gbmV3IFRyYXZlcnNhbEVycm9yKFxuICAgIFwiQ2Fubm90IHJlbW92ZSBhIG5vZGUgdW5sZXNzIGl0IGlzIHBhcnQgb2YgYW4gYXJyYXlcIixcbiAgICBub2RlLCBwYXJlbnQsIGtleVxuICApO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gY2Fubm90UmVwbGFjZU5vZGUobm9kZTogQVNULk5vZGUsIHBhcmVudDogQVNULk5vZGUsIGtleTogc3RyaW5nKSB7XG4gIHJldHVybiBuZXcgVHJhdmVyc2FsRXJyb3IoXG4gICAgXCJDYW5ub3QgcmVwbGFjZSBhIG5vZGUgd2l0aCBtdWx0aXBsZSBub2RlcyB1bmxlc3MgaXQgaXMgcGFydCBvZiBhbiBhcnJheVwiLFxuICAgIG5vZGUsIHBhcmVudCwga2V5XG4gICk7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBjYW5ub3RSZXBsYWNlT3JSZW1vdmVJbktleUhhbmRsZXJZZXQobm9kZTogQVNULk5vZGUsIGtleTogc3RyaW5nKSB7XG4gIHJldHVybiBuZXcgVHJhdmVyc2FsRXJyb3IoXG4gICAgXCJSZXBsYWNpbmcgYW5kIHJlbW92aW5nIGluIGtleSBoYW5kbGVycyBpcyBub3QgeWV0IHN1cHBvcnRlZC5cIixcbiAgICBub2RlLCBudWxsLCBrZXlcbiAgKTtcbn1cbiJdfQ==