"use strict";

Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.Parser = undefined;

var _simpleHtmlTokenizer = require("simple-html-tokenizer");

var _util = require("@glimmer/util");

var _createClass = function () {
    function defineProperties(target, props) {
        for (var i = 0; i < props.length; i++) {
            var descriptor = props[i];descriptor.enumerable = descriptor.enumerable || false;descriptor.configurable = true;if ("value" in descriptor) descriptor.writable = true;Object.defineProperty(target, descriptor.key, descriptor);
        }
    }return function (Constructor, protoProps, staticProps) {
        if (protoProps) defineProperties(Constructor.prototype, protoProps);if (staticProps) defineProperties(Constructor, staticProps);return Constructor;
    };
}();

function _classCallCheck(instance, Constructor) {
    if (!(instance instanceof Constructor)) {
        throw new TypeError("Cannot call a class as a function");
    }
}

var entityParser = new _simpleHtmlTokenizer.EntityParser(_simpleHtmlTokenizer.HTML5NamedCharRefs);
var Parser = exports.Parser = function () {
    function Parser(source) {
        var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};

        _classCallCheck(this, Parser);

        this.elementStack = [];
        this.currentAttribute = null;
        this.currentNode = null;
        this.tokenizer = new _simpleHtmlTokenizer.EventedTokenizer(this, entityParser);
        this.options = options;
        this.tokenizer.states.tagOpen = function () {
            var char = this.consume();
            if (char === "!") {
                this['state'] = 'markupDeclaration';
            } else if (char === "/") {
                this['state'] = 'endTagOpen';
            } else if (/[A-Za-z]/.test(char)) {
                this['state'] = 'tagName';
                this['delegate'].beginStartTag();
                this['delegate'].appendToTagName(char);
            }
        };
        this.tokenizer.states.endTagOpen = function () {
            var char = this.consume();
            if (/[A-Za-z]/.test(char)) {
                this['state'] = 'tagName';
                this['delegate'].beginEndTag();
                this['delegate'].appendToTagName(char);
            }
        };
        this.source = source.split(/(?:\r\n?|\n)/g);
    }

    Parser.prototype.acceptNode = function acceptNode(node) {
        return this[node.type](node);
    };

    Parser.prototype.currentElement = function currentElement() {
        return this.elementStack[this.elementStack.length - 1];
    };

    Parser.prototype.sourceForNode = function sourceForNode(node, endNode) {
        var firstLine = node.loc.start.line - 1;
        var currentLine = firstLine - 1;
        var firstColumn = node.loc.start.column;
        var string = [];
        var line = void 0;
        var lastLine = void 0;
        var lastColumn = void 0;
        if (endNode) {
            lastLine = endNode.loc.end.line - 1;
            lastColumn = endNode.loc.end.column;
        } else {
            lastLine = node.loc.end.line - 1;
            lastColumn = node.loc.end.column;
        }
        while (currentLine < lastLine) {
            currentLine++;
            line = this.source[currentLine];
            if (currentLine === firstLine) {
                if (firstLine === lastLine) {
                    string.push(line.slice(firstColumn, lastColumn));
                } else {
                    string.push(line.slice(firstColumn));
                }
            } else if (currentLine === lastLine) {
                string.push(line.slice(0, lastColumn));
            } else {
                string.push(line);
            }
        }
        return string.join('\n');
    };

    _createClass(Parser, [{
        key: "currentAttr",
        get: function get() {
            return this.currentAttribute;
        }
    }, {
        key: "currentTag",
        get: function get() {
            var node = this.currentNode;
            false && (0, _util.assert)(node && (node.type === 'StartTag' || node.type === 'EndTag'), 'expected tag');

            return node;
        }
    }, {
        key: "currentStartTag",
        get: function get() {
            var node = this.currentNode;
            false && (0, _util.assert)(node && node.type === 'StartTag', 'expected start tag');

            return node;
        }
    }, {
        key: "currentEndTag",
        get: function get() {
            var node = this.currentNode;
            false && (0, _util.assert)(node && node.type === 'EndTag', 'expected end tag');

            return node;
        }
    }, {
        key: "currentComment",
        get: function get() {
            var node = this.currentNode;
            false && (0, _util.assert)(node && node.type === 'CommentStatement', 'expected a comment');

            return node;
        }
    }, {
        key: "currentData",
        get: function get() {
            var node = this.currentNode;
            false && (0, _util.assert)(node && node.type === 'TextNode', 'expected a text node');

            return node;
        }
    }]);

    return Parser;
}();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,