'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.parseElementBlockParams = parseElementBlockParams;
exports.childrenFor = childrenFor;
exports.appendChild = appendChild;
exports.isLiteral = isLiteral;
exports.printLiteral = printLiteral;

var _syntaxError = require('./errors/syntax-error');

var _syntaxError2 = _interopRequireDefault(_syntaxError);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

// Regex to validate the identifier for block parameters.
// Based on the ID validation regex in Handlebars.
var ID_INVERSE_PATTERN = /[!"#%-,\.\/;->@\[-\^`\{-~]/;
// Checks the element's attributes to see if it uses block params.
// If it does, registers the block params with the program and
// removes the corresponding attributes from the element.
function parseElementBlockParams(element) {
    var params = parseBlockParams(element);
    if (params) element.blockParams = params;
}
function parseBlockParams(element) {
    var l = element.attributes.length;
    var attrNames = [];
    for (var i = 0; i < l; i++) {
        attrNames.push(element.attributes[i].name);
    }
    var asIndex = attrNames.indexOf('as');
    if (asIndex !== -1 && l > asIndex && attrNames[asIndex + 1].charAt(0) === '|') {
        // Some basic validation, since we're doing the parsing ourselves
        var paramsString = attrNames.slice(asIndex).join(' ');
        if (paramsString.charAt(paramsString.length - 1) !== '|' || paramsString.match(/\|/g).length !== 2) {
            throw new _syntaxError2.default('Invalid block parameters syntax: \'' + paramsString + '\'', element.loc);
        }
        var params = [];
        for (var _i = asIndex + 1; _i < l; _i++) {
            var param = attrNames[_i].replace(/\|/g, '');
            if (param !== '') {
                if (ID_INVERSE_PATTERN.test(param)) {
                    throw new _syntaxError2.default('Invalid identifier for block parameters: \'' + param + '\' in \'' + paramsString + '\'', element.loc);
                }
                params.push(param);
            }
        }
        if (params.length === 0) {
            throw new _syntaxError2.default('Cannot use zero block parameters: \'' + paramsString + '\'', element.loc);
        }
        element.attributes = element.attributes.slice(0, asIndex);
        return params;
    }
    return null;
}
function childrenFor(node) {
    switch (node.type) {
        case 'Program':
            return node.body;
        case 'ElementNode':
            return node.children;
    }
}
function appendChild(parent, node) {
    childrenFor(parent).push(node);
}
function isLiteral(path) {
    return path.type === 'StringLiteral' || path.type === 'BooleanLiteral' || path.type === 'NumberLiteral' || path.type === 'NullLiteral' || path.type === 'UndefinedLiteral';
}
function printLiteral(literal) {
    if (literal.type === 'UndefinedLiteral') {
        return 'undefined';
    } else {
        return JSON.stringify(literal.value);
    }
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidXRpbHMuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi9wYWNrYWdlcy9AZ2xpbW1lci9zeW50YXgvbGliL3V0aWxzLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7O0FBRUEsQUFBTyxBQUFXLEFBQU0sQUFBdUIsQUFBQzs7Ozs7O0FBRWhELEFBQXlEO0FBQ3pELEFBQWtEO0FBRWxELElBQUksQUFBa0IscUJBQUcsQUFBNEIsQUFBQztBQUV0RCxBQUFrRTtBQUNsRSxBQUE4RDtBQUM5RCxBQUF5RCxBQUV6RCxBQUFNO2lDQUFrQyxBQUF3QixTQUM5RDtRQUFJLEFBQU0sU0FBRyxBQUFnQixpQkFBQyxBQUFPLEFBQUMsQUFBQyxBQUN2QyxBQUFFLEFBQUM7UUFBQyxBQUFNLEFBQUMsUUFBQyxBQUFPLFFBQUMsQUFBVyxjQUFHLEFBQU0sQUFBQyxBQUMzQyxBQUFDOztBQUVELDBCQUEwQixBQUF3QixTQUNoRDtRQUFJLEFBQUMsSUFBRyxBQUFPLFFBQUMsQUFBVSxXQUFDLEFBQU0sQUFBQyxBQUNsQztRQUFJLEFBQVMsWUFBRyxBQUFFLEFBQUMsQUFFbkIsQUFBRyxBQUFDO1NBQUMsSUFBSSxBQUFDLElBQUcsQUFBQyxHQUFFLEFBQUMsSUFBRyxBQUFDLEdBQUUsQUFBQyxBQUFFLEtBQUUsQUFBQyxBQUMzQixBQUFTO2tCQUFDLEFBQUksS0FBQyxBQUFPLFFBQUMsQUFBVSxXQUFDLEFBQUMsQUFBQyxHQUFDLEFBQUksQUFBQyxBQUFDLEFBQzdDLEFBQUMsQUFFRDs7UUFBSSxBQUFPLFVBQUcsQUFBUyxVQUFDLEFBQU8sUUFBQyxBQUFJLEFBQUMsQUFBQyxBQUV0QyxBQUFFLEFBQUM7UUFBQyxBQUFPLFlBQUssQ0FBQyxBQUFDLEtBQUksQUFBQyxJQUFHLEFBQU8sV0FBSSxBQUFTLFVBQUMsQUFBTyxVQUFHLEFBQUMsQUFBQyxHQUFDLEFBQU0sT0FBQyxBQUFDLEFBQUMsT0FBSyxBQUFHLEFBQUMsS0FBQyxBQUFD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QUMsQUFBSTtXQUFDLEFBQUMsQUFDTixBQUFNO2VBQUMsQUFBSSxLQUFDLEFBQVMsVUFBQyxBQUFPLFFBQUMsQUFBSyxBQUFDLEFBQUMsQUFDdkMsQUFBQyxBQUNILEFBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgKiBhcyBBU1QgZnJvbSAnLi90eXBlcy9ub2Rlcyc7XG5pbXBvcnQgeyBPcHRpb24gfSBmcm9tIFwiQGdsaW1tZXIvaW50ZXJmYWNlc1wiO1xuaW1wb3J0IFN5bnRheEVycm9yIGZyb20gJy4vZXJyb3JzL3N5bnRheC1lcnJvcic7XG5cbi8vIFJlZ2V4IHRvIHZhbGlkYXRlIHRoZSBpZGVudGlmaWVyIGZvciBibG9jayBwYXJhbWV0ZXJzLlxuLy8gQmFzZWQgb24gdGhlIElEIHZhbGlkYXRpb24gcmVnZXggaW4gSGFuZGxlYmFycy5cblxubGV0IElEX0lOVkVSU0VfUEFUVEVSTiA9IC9bIVwiIyUtLFxcLlxcLzstPkBcXFstXFxeYFxcey1+XS87XG5cbi8vIENoZWNrcyB0aGUgZWxlbWVudCdzIGF0dHJpYnV0ZXMgdG8gc2VlIGlmIGl0IHVzZXMgYmxvY2sgcGFyYW1zLlxuLy8gSWYgaXQgZG9lcywgcmVnaXN0ZXJzIHRoZSBibG9jayBwYXJhbXMgd2l0aCB0aGUgcHJvZ3JhbSBhbmRcbi8vIHJlbW92ZXMgdGhlIGNvcnJlc3BvbmRpbmcgYXR0cmlidXRlcyBmcm9tIHRoZSBlbGVtZW50LlxuXG5leHBvcnQgZnVuY3Rpb24gcGFyc2VFbGVtZW50QmxvY2tQYXJhbXMoZWxlbWVudDogQVNULkVsZW1lbnROb2RlKSB7XG4gIGxldCBwYXJhbXMgPSBwYXJzZUJsb2NrUGFyYW1zKGVsZW1lbnQpO1xuICBpZiAocGFyYW1zKSBlbGVtZW50LmJsb2NrUGFyYW1zID0gcGFyYW1zO1xufVxuXG5mdW5jdGlvbiBwYXJzZUJsb2NrUGFyYW1zKGVsZW1lbnQ6IEFTVC5FbGVtZW50Tm9kZSk6IE9wdGlvbjxzdHJpbmdbXT4ge1xuICBsZXQgbCA9IGVsZW1lbnQuYXR0cmlidXRlcy5sZW5ndGg7XG4gIGxldCBhdHRyTmFtZXMgPSBbXTtcblxuICBmb3IgKGxldCBpID0gMDsgaSA8IGw7IGkrKykge1xuICAgIGF0dHJOYW1lcy5wdXNoKGVsZW1lbnQuYXR0cmlidXRlc1tpXS5uYW1lKTtcbiAgfVxuXG4gIGxldCBhc0luZGV4ID0gYXR0ck5hbWVzLmluZGV4T2YoJ2FzJyk7XG5cbiAgaWYgKGFzSW5kZXggIT09IC0xICYmIGwgPiBhc0luZGV4ICYmIGF0dHJOYW1lc1thc0luZGV4ICsgMV0uY2hhckF0KDApID09PSAnfCcpIHtcbiAgICAvLyBTb21lIGJhc2ljIHZhbGlkYXRpb24sIHNpbmNlIHdlJ3JlIGRvaW5nIHRoZSBwYXJzaW5nIG91cnNlbHZlc1xuICAgIGxldCBwYXJhbXNTdHJpbmcgPSBhdHRyTmFtZXMuc2xpY2UoYXNJbmRleCkuam9pbignICcpO1xuICAgIGlmIChwYXJhbXNTdHJpbmcuY2hhckF0KHBhcmFtc1N0cmluZy5sZW5ndGggLSAxKSAhPT0gJ3wnIHx8IHBhcmFtc1N0cmluZy5tYXRjaCgvXFx8L2cpIS5sZW5ndGggIT09IDIpIHtcbiAgICAgIHRocm93IG5ldyBTeW50YXhFcnJvcignSW52YWxpZCBibG9jayBwYXJhbWV0ZXJzIHN5bnRheDogXFwnJyArIHBhcmFtc1N0cmluZyArICdcXCcnLCBlbGVtZW50LmxvYyk7XG4gICAgfVxuXG4gICAgbGV0IHBhcmFtcyA9IFtdO1xuICAgIGZvciAobGV0IGkgPSBhc0luZGV4ICsgMTsgaSA8IGw7IGkrKykge1xuICAgICAgbGV0IHBhcmFtID0gYXR0ck5hbWVzW2ldLnJlcGxhY2UoL1xcfC9nLCAnJyk7XG4gICAgICBpZiAocGFyYW0gIT09ICcnKSB7XG4gICAgICAgIGlmIChJRF9JTlZFUlNFX1BBVFRFUk4udGVzdChwYXJhbSkpIHtcbiAgICAgICAgICB0aHJvdyBuZXcgU3ludGF4RXJyb3IoJ0ludmFsaWQgaWRlbnRpZmllciBmb3IgYmxvY2sgcGFyYW1ldGVyczogXFwnJyArIHBhcmFtICsgJ1xcJyBpbiBcXCcnICsgcGFyYW1zU3RyaW5nICsgJ1xcJycsIGVsZW1lbnQubG9jKTtcbiAgICAgICAgfVxuICAgICAgICBwYXJhbXMucHVzaChwYXJhbSk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgaWYgKHBhcmFtcy5sZW5ndGggPT09IDApIHtcbiAgICAgIHRocm93IG5ldyBTeW50YXhFcnJvcignQ2Fubm90IHVzZSB6ZXJvIGJsb2NrIHBhcmFtZXRlcnM6IFxcJycgKyBwYXJhbXNTdHJpbmcgKyAnXFwnJywgZWxlbWVudC5sb2MpO1xuICAgIH1cblxuICAgIGVsZW1lbnQuYXR0cmlidXRlcyA9IGVsZW1lbnQuYXR0cmlidXRlcy5zbGljZSgwLCBhc0luZGV4KTtcbiAgICByZXR1cm4gcGFyYW1zO1xuICB9XG5cbiAgcmV0dXJuIG51bGw7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBjaGlsZHJlbkZvcihub2RlOiBBU1QuUHJvZ3JhbSB8IEFTVC5FbGVtZW50Tm9kZSk6IEFTVC5TdGF0ZW1lbnRbXSB7XG4gIHN3aXRjaCAobm9kZS50eXBlKSB7XG4gICAgY2FzZSAnUHJvZ3JhbSc6IHJldHVybiBub2RlLmJvZHk7XG4gICAgY2FzZSAnRWxlbWVudE5vZGUnOiByZXR1cm4gbm9kZS5jaGlsZHJlbjtcbiAgfVxufVxuXG5leHBvcnQgZnVuY3Rpb24gYXBwZW5kQ2hpbGQocGFyZW50OiBBU1QuUHJvZ3JhbSB8IEFTVC5FbGVtZW50Tm9kZSwgbm9kZTogQVNULlN0YXRlbWVudCkge1xuICBjaGlsZHJlbkZvcihwYXJlbnQpLnB1c2gobm9kZSk7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBpc0xpdGVyYWwocGF0aDogQVNULlBhdGhFeHByZXNzaW9uIHwgQVNULkxpdGVyYWwpOiBwYXRoIGlzIEFTVC5MaXRlcmFsIHtcbiAgcmV0dXJuIHBhdGgudHlwZSA9PT0gJ1N0cmluZ0xpdGVyYWwnXG4gICAgICB8fCBwYXRoLnR5cGUgPT09ICdCb29sZWFuTGl0ZXJhbCdcbiAgICAgIHx8IHBhdGgudHlwZSA9PT0gJ051bWJlckxpdGVyYWwnXG4gICAgICB8fCBwYXRoLnR5cGUgPT09ICdOdWxsTGl0ZXJhbCdcbiAgICAgIHx8IHBhdGgudHlwZSA9PT0gJ1VuZGVmaW5lZExpdGVyYWwnO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gcHJpbnRMaXRlcmFsKGxpdGVyYWw6IEFTVC5MaXRlcmFsKTogc3RyaW5nIHtcbiAgaWYgKGxpdGVyYWwudHlwZSA9PT0gJ1VuZGVmaW5lZExpdGVyYWwnKSB7XG4gICAgcmV0dXJuICd1bmRlZmluZWQnO1xuICB9IGVsc2Uge1xuICAgIHJldHVybiBKU09OLnN0cmluZ2lmeShsaXRlcmFsLnZhbHVlKTtcbiAgfVxufVxuIl19