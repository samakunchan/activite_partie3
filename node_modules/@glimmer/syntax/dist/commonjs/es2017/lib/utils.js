'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.parseElementBlockParams = parseElementBlockParams;
exports.childrenFor = childrenFor;
exports.appendChild = appendChild;
exports.isLiteral = isLiteral;
exports.printLiteral = printLiteral;

var _syntaxError = require('./errors/syntax-error');

var _syntaxError2 = _interopRequireDefault(_syntaxError);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

// Regex to validate the identifier for block parameters.
// Based on the ID validation regex in Handlebars.
let ID_INVERSE_PATTERN = /[!"#%-,\.\/;->@\[-\^`\{-~]/;
// Checks the element's attributes to see if it uses block params.
// If it does, registers the block params with the program and
// removes the corresponding attributes from the element.
function parseElementBlockParams(element) {
    let params = parseBlockParams(element);
    if (params) element.blockParams = params;
}
function parseBlockParams(element) {
    let l = element.attributes.length;
    let attrNames = [];
    for (let i = 0; i < l; i++) {
        attrNames.push(element.attributes[i].name);
    }
    let asIndex = attrNames.indexOf('as');
    if (asIndex !== -1 && l > asIndex && attrNames[asIndex + 1].charAt(0) === '|') {
        // Some basic validation, since we're doing the parsing ourselves
        let paramsString = attrNames.slice(asIndex).join(' ');
        if (paramsString.charAt(paramsString.length - 1) !== '|' || paramsString.match(/\|/g).length !== 2) {
            throw new _syntaxError2.default('Invalid block parameters syntax: \'' + paramsString + '\'', element.loc);
        }
        let params = [];
        for (let i = asIndex + 1; i < l; i++) {
            let param = attrNames[i].replace(/\|/g, '');
            if (param !== '') {
                if (ID_INVERSE_PATTERN.test(param)) {
                    throw new _syntaxError2.default('Invalid identifier for block parameters: \'' + param + '\' in \'' + paramsString + '\'', element.loc);
                }
                params.push(param);
            }
        }
        if (params.length === 0) {
            throw new _syntaxError2.default('Cannot use zero block parameters: \'' + paramsString + '\'', element.loc);
        }
        element.attributes = element.attributes.slice(0, asIndex);
        return params;
    }
    return null;
}
function childrenFor(node) {
    switch (node.type) {
        case 'Program':
            return node.body;
        case 'ElementNode':
            return node.children;
    }
}
function appendChild(parent, node) {
    childrenFor(parent).push(node);
}
function isLiteral(path) {
    return path.type === 'StringLiteral' || path.type === 'BooleanLiteral' || path.type === 'NumberLiteral' || path.type === 'NullLiteral' || path.type === 'UndefinedLiteral';
}
function printLiteral(literal) {
    if (literal.type === 'UndefinedLiteral') {
        return 'undefined';
    } else {
        return JSON.stringify(literal.value);
    }
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidXRpbHMuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi9wYWNrYWdlcy9AZ2xpbW1lci9zeW50YXgvbGliL3V0aWxzLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7O0FBRUEsQUFBTyxBQUFXLEFBQU0sQUFBdUIsQUFBQzs7Ozs7O0FBRWhELEFBQXlEO0FBQ3pELEFBQWtEO0FBRWxELElBQUksQUFBa0IscUJBQUcsQUFBNEIsQUFBQztBQUV0RCxBQUFrRTtBQUNsRSxBQUE4RDtBQUM5RCxBQUF5RCxBQUV6RCxBQUFNO2lDQUFrQyxBQUF3QixTQUM5RDtRQUFJLEFBQU0sU0FBRyxBQUFnQixpQkFBQyxBQUFPLEFBQUMsQUFBQyxBQUN2QyxBQUFFLEFBQUM7UUFBQyxBQUFNLEFBQUMsUUFBQyxBQUFPLFFBQUMsQUFBVyxjQUFHLEFBQU0sQUFBQyxBQUMzQyxBQUFDOztBQUVELDBCQUEwQixBQUF3QixTQUNoRDtRQUFJLEFBQUMsSUFBRyxBQUFPLFFBQUMsQUFBVSxXQUFDLEFBQU0sQUFBQyxBQUNsQztRQUFJLEFBQVMsWUFBRyxBQUFFLEFBQUMsQUFFbkIsQUFBRyxBQUFDO1NBQUMsSUFBSSxBQUFDLElBQUcsQUFBQyxHQUFFLEFBQUMsSUFBRyxBQUFDLEdBQUUsQUFBQyxBQUFFLEtBQUUsQUFBQyxBQUMzQixBQUFTO2tCQUFDLEFBQUksS0FBQyxBQUFPLFFBQUMsQUFBVSxXQUFDLEFBQUMsQUFBQyxHQUFDLEFBQUksQUFBQyxBQUFDLEFBQzdDLEFBQUM7QUFFRDtRQUFJLEFBQU8sVUFBRyxBQUFTLFVBQUMsQUFBTyxRQUFDLEFBQUksQUFBQyxBQUFDLEFBRXRDLEFBQUUsQUFBQztRQUFDLEFBQU8sWUFBSyxDQUFDLEFBQUMsS0FBSSxBQUFDLElBQUcsQUFBTyxXQUFJLEFBQVMsVUFBQyxBQUFPLFVBQUcsQUFBQyxBQUFDLEdBQUMsQUFBTSxPQUFDLEFBQUMsQUFBQyxPQUFLLEFBQUcsQUFBQyxLQUFDLEFBQUMs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O1dBQUMsQUFBQyxBQUNOLEFBQU07ZUFBQyxBQUFJLEtBQUMsQUFBUyxVQUFDLEFBQU8sUUFBQyxBQUFLLEFBQUMsQUFBQyxBQUN2QyxBQUFDLEFBQ0g7QUFBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCAqIGFzIEFTVCBmcm9tICcuL3R5cGVzL25vZGVzJztcbmltcG9ydCB7IE9wdGlvbiB9IGZyb20gXCJAZ2xpbW1lci9pbnRlcmZhY2VzXCI7XG5pbXBvcnQgU3ludGF4RXJyb3IgZnJvbSAnLi9lcnJvcnMvc3ludGF4LWVycm9yJztcblxuLy8gUmVnZXggdG8gdmFsaWRhdGUgdGhlIGlkZW50aWZpZXIgZm9yIGJsb2NrIHBhcmFtZXRlcnMuXG4vLyBCYXNlZCBvbiB0aGUgSUQgdmFsaWRhdGlvbiByZWdleCBpbiBIYW5kbGViYXJzLlxuXG5sZXQgSURfSU5WRVJTRV9QQVRURVJOID0gL1shXCIjJS0sXFwuXFwvOy0+QFxcWy1cXF5gXFx7LX5dLztcblxuLy8gQ2hlY2tzIHRoZSBlbGVtZW50J3MgYXR0cmlidXRlcyB0byBzZWUgaWYgaXQgdXNlcyBibG9jayBwYXJhbXMuXG4vLyBJZiBpdCBkb2VzLCByZWdpc3RlcnMgdGhlIGJsb2NrIHBhcmFtcyB3aXRoIHRoZSBwcm9ncmFtIGFuZFxuLy8gcmVtb3ZlcyB0aGUgY29ycmVzcG9uZGluZyBhdHRyaWJ1dGVzIGZyb20gdGhlIGVsZW1lbnQuXG5cbmV4cG9ydCBmdW5jdGlvbiBwYXJzZUVsZW1lbnRCbG9ja1BhcmFtcyhlbGVtZW50OiBBU1QuRWxlbWVudE5vZGUpIHtcbiAgbGV0IHBhcmFtcyA9IHBhcnNlQmxvY2tQYXJhbXMoZWxlbWVudCk7XG4gIGlmIChwYXJhbXMpIGVsZW1lbnQuYmxvY2tQYXJhbXMgPSBwYXJhbXM7XG59XG5cbmZ1bmN0aW9uIHBhcnNlQmxvY2tQYXJhbXMoZWxlbWVudDogQVNULkVsZW1lbnROb2RlKTogT3B0aW9uPHN0cmluZ1tdPiB7XG4gIGxldCBsID0gZWxlbWVudC5hdHRyaWJ1dGVzLmxlbmd0aDtcbiAgbGV0IGF0dHJOYW1lcyA9IFtdO1xuXG4gIGZvciAobGV0IGkgPSAwOyBpIDwgbDsgaSsrKSB7XG4gICAgYXR0ck5hbWVzLnB1c2goZWxlbWVudC5hdHRyaWJ1dGVzW2ldLm5hbWUpO1xuICB9XG5cbiAgbGV0IGFzSW5kZXggPSBhdHRyTmFtZXMuaW5kZXhPZignYXMnKTtcblxuICBpZiAoYXNJbmRleCAhPT0gLTEgJiYgbCA+IGFzSW5kZXggJiYgYXR0ck5hbWVzW2FzSW5kZXggKyAxXS5jaGFyQXQoMCkgPT09ICd8Jykge1xuICAgIC8vIFNvbWUgYmFzaWMgdmFsaWRhdGlvbiwgc2luY2Ugd2UncmUgZG9pbmcgdGhlIHBhcnNpbmcgb3Vyc2VsdmVzXG4gICAgbGV0IHBhcmFtc1N0cmluZyA9IGF0dHJOYW1lcy5zbGljZShhc0luZGV4KS5qb2luKCcgJyk7XG4gICAgaWYgKHBhcmFtc1N0cmluZy5jaGFyQXQocGFyYW1zU3RyaW5nLmxlbmd0aCAtIDEpICE9PSAnfCcgfHwgcGFyYW1zU3RyaW5nLm1hdGNoKC9cXHwvZykhLmxlbmd0aCAhPT0gMikge1xuICAgICAgdGhyb3cgbmV3IFN5bnRheEVycm9yKCdJbnZhbGlkIGJsb2NrIHBhcmFtZXRlcnMgc3ludGF4OiBcXCcnICsgcGFyYW1zU3RyaW5nICsgJ1xcJycsIGVsZW1lbnQubG9jKTtcbiAgICB9XG5cbiAgICBsZXQgcGFyYW1zID0gW107XG4gICAgZm9yIChsZXQgaSA9IGFzSW5kZXggKyAxOyBpIDwgbDsgaSsrKSB7XG4gICAgICBsZXQgcGFyYW0gPSBhdHRyTmFtZXNbaV0ucmVwbGFjZSgvXFx8L2csICcnKTtcbiAgICAgIGlmIChwYXJhbSAhPT0gJycpIHtcbiAgICAgICAgaWYgKElEX0lOVkVSU0VfUEFUVEVSTi50ZXN0KHBhcmFtKSkge1xuICAgICAgICAgIHRocm93IG5ldyBTeW50YXhFcnJvcignSW52YWxpZCBpZGVudGlmaWVyIGZvciBibG9jayBwYXJhbWV0ZXJzOiBcXCcnICsgcGFyYW0gKyAnXFwnIGluIFxcJycgKyBwYXJhbXNTdHJpbmcgKyAnXFwnJywgZWxlbWVudC5sb2MpO1xuICAgICAgICB9XG4gICAgICAgIHBhcmFtcy5wdXNoKHBhcmFtKTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICBpZiAocGFyYW1zLmxlbmd0aCA9PT0gMCkge1xuICAgICAgdGhyb3cgbmV3IFN5bnRheEVycm9yKCdDYW5ub3QgdXNlIHplcm8gYmxvY2sgcGFyYW1ldGVyczogXFwnJyArIHBhcmFtc1N0cmluZyArICdcXCcnLCBlbGVtZW50LmxvYyk7XG4gICAgfVxuXG4gICAgZWxlbWVudC5hdHRyaWJ1dGVzID0gZWxlbWVudC5hdHRyaWJ1dGVzLnNsaWNlKDAsIGFzSW5kZXgpO1xuICAgIHJldHVybiBwYXJhbXM7XG4gIH1cblxuICByZXR1cm4gbnVsbDtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGNoaWxkcmVuRm9yKG5vZGU6IEFTVC5Qcm9ncmFtIHwgQVNULkVsZW1lbnROb2RlKTogQVNULlN0YXRlbWVudFtdIHtcbiAgc3dpdGNoIChub2RlLnR5cGUpIHtcbiAgICBjYXNlICdQcm9ncmFtJzogcmV0dXJuIG5vZGUuYm9keTtcbiAgICBjYXNlICdFbGVtZW50Tm9kZSc6IHJldHVybiBub2RlLmNoaWxkcmVuO1xuICB9XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBhcHBlbmRDaGlsZChwYXJlbnQ6IEFTVC5Qcm9ncmFtIHwgQVNULkVsZW1lbnROb2RlLCBub2RlOiBBU1QuU3RhdGVtZW50KSB7XG4gIGNoaWxkcmVuRm9yKHBhcmVudCkucHVzaChub2RlKTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGlzTGl0ZXJhbChwYXRoOiBBU1QuUGF0aEV4cHJlc3Npb24gfCBBU1QuTGl0ZXJhbCk6IHBhdGggaXMgQVNULkxpdGVyYWwge1xuICByZXR1cm4gcGF0aC50eXBlID09PSAnU3RyaW5nTGl0ZXJhbCdcbiAgICAgIHx8IHBhdGgudHlwZSA9PT0gJ0Jvb2xlYW5MaXRlcmFsJ1xuICAgICAgfHwgcGF0aC50eXBlID09PSAnTnVtYmVyTGl0ZXJhbCdcbiAgICAgIHx8IHBhdGgudHlwZSA9PT0gJ051bGxMaXRlcmFsJ1xuICAgICAgfHwgcGF0aC50eXBlID09PSAnVW5kZWZpbmVkTGl0ZXJhbCc7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBwcmludExpdGVyYWwobGl0ZXJhbDogQVNULkxpdGVyYWwpOiBzdHJpbmcge1xuICBpZiAobGl0ZXJhbC50eXBlID09PSAnVW5kZWZpbmVkTGl0ZXJhbCcpIHtcbiAgICByZXR1cm4gJ3VuZGVmaW5lZCc7XG4gIH0gZWxzZSB7XG4gICAgcmV0dXJuIEpTT04uc3RyaW5naWZ5KGxpdGVyYWwudmFsdWUpO1xuICB9XG59XG4iXX0=