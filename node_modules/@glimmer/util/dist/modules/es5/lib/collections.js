var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

import { ensureGuid } from './guid';
export function dict() {
    return Object.create(null);
}
export var DictSet = function () {
    function DictSet() {
        _classCallCheck(this, DictSet);

        this.dict = dict();
    }

    DictSet.prototype.add = function add(obj) {
        if (typeof obj === 'string') this.dict[obj] = obj;else this.dict[ensureGuid(obj)] = obj;
        return this;
    };

    DictSet.prototype.delete = function _delete(obj) {
        if (typeof obj === 'string') delete this.dict[obj];else if (obj._guid) delete this.dict[obj._guid];
    };

    return DictSet;
}();
export var Stack = function () {
    function Stack() {
        _classCallCheck(this, Stack);

        this.stack = [];
        this.current = null;
    }

    Stack.prototype.push = function push(item) {
        this.current = item;
        this.stack.push(item);
    };

    Stack.prototype.pop = function pop() {
        var item = this.stack.pop();
        var len = this.stack.length;
        this.current = len === 0 ? null : this.stack[len - 1];
        return item === undefined ? null : item;
    };

    Stack.prototype.isEmpty = function isEmpty() {
        return this.stack.length === 0;
    };

    _createClass(Stack, [{
        key: 'size',
        get: function get() {
            return this.stack.length;
        }
    }]);

    return Stack;
}();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY29sbGVjdGlvbnMuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi9wYWNrYWdlcy9AZ2xpbW1lci91dGlsL2xpYi9jb2xsZWN0aW9ucy50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7O0FBQUEsQUFBTyxTQUFXLEFBQVUsQUFBRSxrQkFBTSxBQUFRLEFBQUM7QUFZN0MsQUFBTSx1QkFDSixBQUFNO1dBQUMsQUFBTSxPQUFDLEFBQU0sT0FBQyxBQUFJLEFBQUMsQUFBQyxBQUM3QixBQUFDOztBQUlELEFBQU0sV0FHSjs7QUFDRSxBQUFJOzthQUFDLEFBQUksT0FBRyxBQUFJLEFBQUssQUFBQyxBQUN4QixBQUFDO0FBRUQsQUFBRzs7eUNBQUMsQUFBTSxLQUNSLEFBQUUsQUFBQztZQUFDLE9BQU8sQUFBRyxRQUFLLEFBQVEsQUFBQyxVQUFDLEFBQUksS0FBQyxBQUFJLEtBQUMsQUFBVSxBQUFDLE9BQUcsQUFBRyxBQUFDLEFBQ3pELEFBQUksU0FBQyxBQUFJLEtBQUMsQUFBSSxLQUFDLEFBQVUsV0FBQyxBQUFVLEFBQUMsQUFBQyxRQUFHLEFBQUcsQUFBQyxBQUM3QyxBQUFNO2VBQUMsQUFBSSxBQUFDLEFBQ2QsQUFBQztBQUVELEFBQU07O2dEQUFDLEFBQU0sS0FDWCxBQUFFLEFBQUM7WUFBQyxPQUFPLEFBQUcsUUFBSyxBQUFRLEFBQUMsVUFBQyxPQUFPLEFBQUksS0FBQyxBQUFJLEtBQUMsQUFBVSxBQUFDLEFBQUMsQUFDMUQsQUFBSSxVQUFDLEFBQUUsQUFBQyxJQUFFLEFBQVcsSUFBQyxBQUFLLEFBQUMsT0FBQyxPQUFPLEFBQUksS0FBQyxBQUFJLEtBQUUsQUFBVyxJQUFDLEFBQUssQUFBQyxBQUFDLEFBQ3BFLEFBQUMsQUFDRjs7Ozs7QUFFRCxBQUFNLFdBQU47O0FBQ1U7O2FBQUssUUFBUSxBQUFFLEFBQUMsQUFDakI7YUFBTyxVQUFjLEFBQUksQUFBQyxBQXNCbkMsQUFBQztBQXBCQyxBQUFXLEFBQUk7O3lDQUlWLEFBQU8sTUFDVixBQUFJO2FBQUMsQUFBTyxVQUFHLEFBQUksQUFBQyxBQUNwQixBQUFJO2FBQUMsQUFBSyxNQUFDLEFBQUksS0FBQyxBQUFJLEFBQUMsQUFBQyxBQUN4QixBQUFDO0FBRUQsQUFBRzs7eUNBQ0Q7WUFBSSxBQUFJLE9BQUcsQUFBSSxLQUFDLEFBQUssTUFBQyxBQUFHLEFBQUUsQUFBQyxBQUM1QjtZQUFJLEFBQUcsTUFBRyxBQUFJLEtBQUMsQUFBSyxNQUFDLEFBQU0sQUFBQyxBQUM1QixBQUFJO2FBQUMsQUFBTyxVQUFHLEFBQUcsUUFBSyxBQUFDLElBQUcsQUFBSSxPQUFHLEFBQUksS0FBQyxBQUFLLE1BQUMsQUFBRyxNQUFHLEFBQUMsQUFBQyxBQUFDLEFBRXRELEFBQU07ZUFBQyxBQUFJLFNBQUssQUFBUyxZQUFHLEFBQUksT0FBRyxBQUFJLEFBQUMsQUFDMUMsQUFBQztBQUVELEFBQU87O2lEQUNMLEFBQU07ZUFBQyxBQUFJLEtBQUMsQUFBSyxNQUFDLEFBQU0sV0FBSyxBQUFDLEFBQUMsQUFDakMsQUFBQyxBQUNGOzs7Ozs0QkFuQkcsQUFBTTttQkFBQyxBQUFJLEtBQUMsQUFBSyxNQUFDLEFBQU0sQUFBQyxBQUMzQixBQUFDO0FBRUQsQUFBSSIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEhhc0d1aWQsIGVuc3VyZUd1aWQgfSBmcm9tICcuL2d1aWQnO1xuaW1wb3J0IHsgT3B0aW9uIH0gZnJvbSAnLi9wbGF0Zm9ybS11dGlscyc7XG5cbmV4cG9ydCBpbnRlcmZhY2UgRGljdDxUPiB7XG4gIFtpbmRleDogc3RyaW5nXTogVDtcbn1cblxuZXhwb3J0IGludGVyZmFjZSBTZXQ8VD4ge1xuICBhZGQodmFsdWU6IFQpOiBTZXQ8VD47XG4gIGRlbGV0ZSh2YWx1ZTogVCk6IHZvaWQ7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBkaWN0PFQ+KCk6IERpY3Q8VD4ge1xuICByZXR1cm4gT2JqZWN0LmNyZWF0ZShudWxsKTtcbn1cblxuZXhwb3J0IHR5cGUgU2V0TWVtYmVyID0gSGFzR3VpZCB8IHN0cmluZztcblxuZXhwb3J0IGNsYXNzIERpY3RTZXQ8VCBleHRlbmRzIFNldE1lbWJlcj4gaW1wbGVtZW50cyBTZXQ8VD4ge1xuICBwcml2YXRlIGRpY3Q6IERpY3Q8VD47XG5cbiAgY29uc3RydWN0b3IoKSB7XG4gICAgdGhpcy5kaWN0ID0gZGljdDxUPigpO1xuICB9XG5cbiAgYWRkKG9iajogVCk6IFNldDxUPiB7XG4gICAgaWYgKHR5cGVvZiBvYmogPT09ICdzdHJpbmcnKSB0aGlzLmRpY3Rbb2JqIGFzIGFueV0gPSBvYmo7XG4gICAgZWxzZSB0aGlzLmRpY3RbZW5zdXJlR3VpZChvYmogYXMgYW55KV0gPSBvYmo7XG4gICAgcmV0dXJuIHRoaXM7XG4gIH1cblxuICBkZWxldGUob2JqOiBUKSB7XG4gICAgaWYgKHR5cGVvZiBvYmogPT09ICdzdHJpbmcnKSBkZWxldGUgdGhpcy5kaWN0W29iaiBhcyBhbnldO1xuICAgIGVsc2UgaWYgKChvYmogYXMgYW55KS5fZ3VpZCkgZGVsZXRlIHRoaXMuZGljdFsob2JqIGFzIGFueSkuX2d1aWRdO1xuICB9XG59XG5cbmV4cG9ydCBjbGFzcyBTdGFjazxUPiB7XG4gIHByaXZhdGUgc3RhY2s6IFRbXSA9IFtdO1xuICBwdWJsaWMgY3VycmVudDogT3B0aW9uPFQ+ID0gbnVsbDtcblxuICBwdWJsaWMgZ2V0IHNpemUoKSB7XG4gICAgcmV0dXJuIHRoaXMuc3RhY2subGVuZ3RoO1xuICB9XG5cbiAgcHVzaChpdGVtOiBUKSB7XG4gICAgdGhpcy5jdXJyZW50ID0gaXRlbTtcbiAgICB0aGlzLnN0YWNrLnB1c2goaXRlbSk7XG4gIH1cblxuICBwb3AoKTogT3B0aW9uPFQ+IHtcbiAgICBsZXQgaXRlbSA9IHRoaXMuc3RhY2sucG9wKCk7XG4gICAgbGV0IGxlbiA9IHRoaXMuc3RhY2subGVuZ3RoO1xuICAgIHRoaXMuY3VycmVudCA9IGxlbiA9PT0gMCA/IG51bGwgOiB0aGlzLnN0YWNrW2xlbiAtIDFdO1xuXG4gICAgcmV0dXJuIGl0ZW0gPT09IHVuZGVmaW5lZCA/IG51bGwgOiBpdGVtO1xuICB9XG5cbiAgaXNFbXB0eSgpOiBib29sZWFuIHtcbiAgICByZXR1cm4gdGhpcy5zdGFjay5sZW5ndGggPT09IDA7XG4gIH1cbn1cbiJdfQ==