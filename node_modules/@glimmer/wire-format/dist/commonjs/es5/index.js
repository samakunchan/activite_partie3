'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.isMaybeLocal = exports.isGet = exports.isFlushElement = exports.isModifier = exports.Ops = undefined;

var _opcodes = require('./lib/opcodes');

Object.defineProperty(exports, 'Ops', {
    enumerable: true,
    get: function () {
        return _opcodes.Opcodes;
    }
});
exports.is = is;
exports.isAttribute = isAttribute;
exports.isArgument = isArgument;
function is(variant) {
    return function (value) {
        return Array.isArray(value) && value[0] === variant;
    };
}
// Statements
var isModifier = exports.isModifier = is(_opcodes.Opcodes.Modifier);
var isFlushElement = exports.isFlushElement = is(_opcodes.Opcodes.FlushElement);
function isAttribute(val) {
    return val[0] === _opcodes.Opcodes.StaticAttr || val[0] === _opcodes.Opcodes.DynamicAttr || val[0] === _opcodes.Opcodes.TrustingAttr;
}
function isArgument(val) {
    return val[0] === _opcodes.Opcodes.StaticArg || val[0] === _opcodes.Opcodes.DynamicArg;
}
// Expressions
var isGet = exports.isGet = is(_opcodes.Opcodes.Get);
var isMaybeLocal = exports.isMaybeLocal = is(_opcodes.Opcodes.MaybeLocal);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi9wYWNrYWdlcy9AZ2xpbW1lci93aXJlLWZvcm1hdC9pbmRleC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7Ozs7O0FBQ0EsQUFBTyxBQUFFLEFBQU8sQUFBRSxBQUFNLEFBQWUsQUFBQyxBQUV4QyxBQUFPOzs7Ozt3QkFBRSxBQUFPLEFBQUksQUFBRyxBQUFFLEFBQU0sQUFBZSxBQUFDLEFBbUIvQyxBQUFNOzs7Ozs7WUFBZ0IsQUFBZSxTQUNuQyxBQUFNO1dBQUMsVUFBUyxBQUFVLE9BQ3hCLEFBQU07ZUFBQyxBQUFLLE1BQUMsQUFBTyxRQUFDLEFBQUssQUFBQyxVQUFJLEFBQUssTUFBQyxBQUFDLEFBQUMsT0FBSyxBQUFPLEFBQUMsQUFDdEQsQUFBQyxBQUFDLEFBQ0osQUFBQzs7O0FBeUxELEFBQWEsQUFDYixBQUFNO0FBQUMsSUFBTSxBQUFVLGtDQUFTLEFBQUUsR0FBc0IsQUFBTyxpQkFBQyxBQUFRLEFBQUMsQUFBQyxBQUMxRSxBQUFNO0FBQUMsSUFBTSxBQUFjLDBDQUFLLEFBQUUsR0FBMEIsQUFBTyxpQkFBQyxBQUFZLEFBQUMsQUFBQyxBQUVsRixBQUFNO3FCQUFzQixBQUFjLEtBQ3hDLEFBQU07V0FBQyxBQUFHLElBQUMsQUFBQyxBQUFDLE9BQUssQUFBTyxpQkFBQyxBQUFVLGNBQUksQUFBRyxJQUFDLEFBQUMsQUFBQyxPQUFLLEFBQU8saUJBQUMsQUFBVyxlQUFJLEFBQUcsSUFBQyxBQUFDLEFBQUMsT0FBSyxBQUFPLGlCQUFDLEFBQVksQUFBQyxBQUM1RyxBQUFDO0FBRUQsQUFBTTtvQkFBcUIsQUFBYyxLQUN2QyxBQUFNO1dBQUMsQUFBRyxJQUFDLEFBQUMsQUFBQyxPQUFLLEFBQU8saUJBQUMsQUFBUyxhQUFJLEFBQUcsSUFBQyxBQUFDLEFBQUMsT0FBSyxBQUFPLGlCQUFDLEFBQVUsQUFBQyxBQUN2RSxBQUFDOztBQUVELEFBQWMsQUFDZCxBQUFNO0FBQUMsSUFBTSxBQUFLLHdCQUFjLEFBQUUsR0FBa0IsQUFBTyxpQkFBQyxBQUFHLEFBQUMsQUFBQyxBQUNqRSxBQUFNO0FBQUMsSUFBTSxBQUFZLHNDQUFPLEFBQUUsR0FBeUIsQUFBTyxpQkFBQyxBQUFVLEFBQUMsQUFBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IERpY3QsIE9wdGlvbiwgT3BhcXVlIH0gZnJvbSAnQGdsaW1tZXIvdXRpbCc7XG5pbXBvcnQgeyBPcGNvZGVzIH0gZnJvbSAnLi9saWIvb3Bjb2Rlcyc7XG5cbmV4cG9ydCB7IE9wY29kZXMgYXMgT3BzIH0gZnJvbSAnLi9saWIvb3Bjb2Rlcyc7XG5cbnR5cGUgSnNvblZhbHVlID1cbiAgICBzdHJpbmdcbiAgfCBudW1iZXJcbiAgfCBib29sZWFuXG4gIHwgSnNvbk9iamVjdFxuICB8IEpzb25BcnJheVxuICA7XG5cbmludGVyZmFjZSBKc29uT2JqZWN0IGV4dGVuZHMgRGljdDxKc29uVmFsdWU+IHt9XG5pbnRlcmZhY2UgSnNvbkFycmF5IGV4dGVuZHMgQXJyYXk8SnNvblZhbHVlPiB7fVxuXG4vLyBUaGlzIGVudGlyZSBmaWxlIGlzIHNlcmlhbGl6ZWQgdG8gZGlzaywgc28gYWxsIHN0cmluZ3Ncbi8vIGVuZCB1cCBiZWluZyBpbnRlcm5lZC5cbmV4cG9ydCB0eXBlIHN0ciA9IHN0cmluZztcbmV4cG9ydCB0eXBlIFRlbXBsYXRlUmVmZXJlbmNlID0gT3B0aW9uPFNlcmlhbGl6ZWRCbG9jaz47XG5leHBvcnQgdHlwZSBZaWVsZFRvID0gbnVtYmVyO1xuXG5leHBvcnQgZnVuY3Rpb24gaXM8VD4odmFyaWFudDogbnVtYmVyKTogKHZhbHVlOiBhbnkpID0+IHZhbHVlIGlzIFQge1xuICByZXR1cm4gZnVuY3Rpb24odmFsdWU6IGFueSk6IHZhbHVlIGlzIFQge1xuICAgIHJldHVybiBBcnJheS5pc0FycmF5KHZhbHVlKSAmJiB2YWx1ZVswXSA9PT0gdmFyaWFudDtcbiAgfTtcbn1cblxuZXhwb3J0IG5hbWVzcGFjZSBDb3JlIHtcbiAgZXhwb3J0IHR5cGUgRXhwcmVzc2lvbiA9IEV4cHJlc3Npb25zLkV4cHJlc3Npb247XG5cbiAgZXhwb3J0IHR5cGUgUGF0aCAgICAgICAgICA9IHN0cltdO1xuICBleHBvcnQgdHlwZSBQYXJhbXMgICAgICAgID0gRXhwcmVzc2lvbltdO1xuICBleHBvcnQgdHlwZSBIYXNoICAgICAgICAgID0gT3B0aW9uPFtzdHJbXSwgRXhwcmVzc2lvbltdXT47XG4gIGV4cG9ydCB0eXBlIEFyZ3MgICAgICAgICAgPSBbUGFyYW1zLCBIYXNoXTtcbiAgZXhwb3J0IHR5cGUgRXZhbEluZm8gICAgICA9IG51bWJlcltdO1xufVxuXG5leHBvcnQgbmFtZXNwYWNlIEV4cHJlc3Npb25zIHtcbiAgZXhwb3J0IHR5cGUgUGF0aCA9IENvcmUuUGF0aDtcbiAgZXhwb3J0IHR5cGUgUGFyYW1zID0gQ29yZS5QYXJhbXM7XG4gIGV4cG9ydCB0eXBlIEhhc2ggPSBDb3JlLkhhc2g7XG5cbiAgZXhwb3J0IHR5cGUgVW5rbm93biAgICAgICAgPSBbT3Bjb2Rlcy5Vbmtub3duLCBzdHJdO1xuICBleHBvcnQgdHlwZSBHZXQgICAgICAgICAgICA9IFtPcGNvZGVzLkdldCwgbnVtYmVyLCBQYXRoXTtcblxuICAvKipcbiAgICogQW1iaWd1b3VzIGJldHdlZW4gYSBzZWxmIGxvb2t1cCAod2hlbiBub3QgaW5zaWRlIGFuIGV2YWwpIGFuZFxuICAgKiBhIGxvY2FsIHZhcmlhYmxlICh3aGVuIHVzZWQgaW5zaWRlIG9mIGFuIGV2YWwpLlxuICAgKi9cbiAgZXhwb3J0IHR5cGUgTWF5YmVMb2NhbCAgICAgPSBbT3Bjb2Rlcy5NYXliZUxvY2FsLCBQYXRoXTtcblxuICBleHBvcnQgdHlwZSBWYWx1ZSAgICAgICAgICA9IHN0ciB8IG51bWJlciB8IGJvb2xlYW4gfCBudWxsO1xuXG4gIGV4cG9ydCB0eXBlIEhhc0Jsb2NrICAgICAgID0gW09wY29kZXMuSGFzQmxvY2ssIFlpZWxkVG9dO1xuICBleHBvcnQgdHlwZSBIYXNCbG9ja1BhcmFtcyA9IFtPcGNvZGVzLkhhc0Jsb2NrUGFyYW1zLCBZaWVsZFRvXTtcbiAgZXhwb3J0IHR5cGUgVW5kZWZpbmVkICAgICAgPSBbT3Bjb2Rlcy5VbmRlZmluZWRdO1xuICBleHBvcnQgdHlwZSBDbGllbnRTaWRlICAgICA9IFtPcGNvZGVzLkNsaWVudFNpZGVFeHByZXNzaW9uLCBhbnldO1xuXG4gIGV4cG9ydCB0eXBlIFR1cGxlRXhwcmVzc2lvbiA9XG4gICAgVW5rbm93blxuICAgIHwgR2V0XG4gICAgfCBNYXliZUxvY2FsXG4gICAgfCBDb25jYXRcbiAgICB8IEhhc0Jsb2NrXG4gICAgfCBIYXNCbG9ja1BhcmFtc1xuICAgIHwgSGVscGVyXG4gICAgfCBVbmRlZmluZWRcbiAgICB8IENsaWVudFNpZGVcbiAgICA7XG5cbiAgZXhwb3J0IHR5cGUgRXhwcmVzc2lvbiA9IFR1cGxlRXhwcmVzc2lvbiB8IFZhbHVlO1xuXG4gIGV4cG9ydCBpbnRlcmZhY2UgQ29uY2F0IGV4dGVuZHMgQXJyYXk8YW55PiB7XG4gICAgWzBdOiBPcGNvZGVzLkNvbmNhdDtcbiAgICBbMV06IFBhcmFtcztcbiAgfVxuXG4gIGV4cG9ydCBpbnRlcmZhY2UgSGVscGVyIGV4dGVuZHMgQXJyYXk8YW55PiB7XG4gICAgWzBdOiBPcGNvZGVzLkhlbHBlcjtcbiAgICBbMV06IHN0cjtcbiAgICBbMl06IFBhcmFtcztcbiAgICBbM106IEhhc2g7XG4gIH1cbn1cblxuZXhwb3J0IHR5cGUgRXhwcmVzc2lvbiA9IEV4cHJlc3Npb25zLkV4cHJlc3Npb247XG5cbmV4cG9ydCB0eXBlIFR1cGxlRXhwcmVzc2lvbiA9IEV4cHJlc3Npb25zLlR1cGxlRXhwcmVzc2lvbjtcblxuZXhwb3J0IG5hbWVzcGFjZSBTdGF0ZW1lbnRzIHtcbiAgZXhwb3J0IHR5cGUgRXhwcmVzc2lvbiA9IEV4cHJlc3Npb25zLkV4cHJlc3Npb247XG4gIGV4cG9ydCB0eXBlIFBhcmFtcyA9IENvcmUuUGFyYW1zO1xuICBleHBvcnQgdHlwZSBIYXNoID0gQ29yZS5IYXNoO1xuICBleHBvcnQgdHlwZSBQYXRoID0gQ29yZS5QYXRoO1xuXG4gIGV4cG9ydCB0eXBlIFRleHQgICAgICAgICAgPSBbT3Bjb2Rlcy5UZXh0LCBzdHJdO1xuICBleHBvcnQgdHlwZSBBcHBlbmQgICAgICAgID0gW09wY29kZXMuQXBwZW5kLCBFeHByZXNzaW9uLCBib29sZWFuXTtcbiAgZXhwb3J0IHR5cGUgQ29tbWVudCAgICAgICA9IFtPcGNvZGVzLkNvbW1lbnQsIHN0cl07XG4gIGV4cG9ydCB0eXBlIE1vZGlmaWVyICAgICAgPSBbT3Bjb2Rlcy5Nb2RpZmllciwgc3RyLCBQYXJhbXMsIEhhc2hdO1xuICBleHBvcnQgdHlwZSBCbG9jayAgICAgICAgID0gW09wY29kZXMuQmxvY2ssIHN0ciwgUGFyYW1zLCBIYXNoLCBPcHRpb248U2VyaWFsaXplZElubGluZUJsb2NrPiwgT3B0aW9uPFNlcmlhbGl6ZWRJbmxpbmVCbG9jaz5dO1xuICBleHBvcnQgdHlwZSBDb21wb25lbnQgICAgID0gW09wY29kZXMuQ29tcG9uZW50LCBzdHIsIEF0dHJpYnV0ZVtdLCBIYXNoLCBPcHRpb248U2VyaWFsaXplZElubGluZUJsb2NrPl07XG4gIGV4cG9ydCB0eXBlIE9wZW5FbGVtZW50ICAgPSBbT3Bjb2Rlcy5PcGVuRWxlbWVudCwgc3RyXTtcbiAgZXhwb3J0IHR5cGUgU3BsYXRFbGVtZW50ICA9IFtPcGNvZGVzLk9wZW5TcGxhdHRlZEVsZW1lbnQsIHN0cl07XG4gIGV4cG9ydCB0eXBlIEZsdXNoRWxlbWVudCAgPSBbT3Bjb2Rlcy5GbHVzaEVsZW1lbnRdO1xuICBleHBvcnQgdHlwZSBDbG9zZUVsZW1lbnQgID0gW09wY29kZXMuQ2xvc2VFbGVtZW50XTtcbiAgZXhwb3J0IHR5cGUgU3RhdGljQXR0ciAgICA9IFtPcGNvZGVzLlN0YXRpY0F0dHIsIHN0ciwgRXhwcmVzc2lvbiwgT3B0aW9uPHN0cj5dO1xuICBleHBvcnQgdHlwZSBEeW5hbWljQXR0ciAgID0gW09wY29kZXMuRHluYW1pY0F0dHIsIHN0ciwgRXhwcmVzc2lvbiwgT3B0aW9uPHN0cj5dO1xuICBleHBvcnQgdHlwZSBBdHRyU3BsYXQgICAgID0gW09wY29kZXMuQXR0clNwbGF0LCBZaWVsZFRvXTtcbiAgZXhwb3J0IHR5cGUgWWllbGQgICAgICAgICA9IFtPcGNvZGVzLllpZWxkLCBZaWVsZFRvLCBPcHRpb248UGFyYW1zPl07XG4gIGV4cG9ydCB0eXBlIFBhcnRpYWwgICAgICAgPSBbT3Bjb2Rlcy5QYXJ0aWFsLCBFeHByZXNzaW9uLCBDb3JlLkV2YWxJbmZvXTtcbiAgZXhwb3J0IHR5cGUgRHluYW1pY0FyZyAgICA9IFtPcGNvZGVzLkR5bmFtaWNBcmcsIHN0ciwgRXhwcmVzc2lvbl07XG4gIGV4cG9ydCB0eXBlIFN0YXRpY0FyZyAgICAgPSBbT3Bjb2Rlcy5TdGF0aWNBcmcsIHN0ciwgRXhwcmVzc2lvbl07XG4gIGV4cG9ydCB0eXBlIFRydXN0aW5nQXR0ciAgPSBbT3Bjb2Rlcy5UcnVzdGluZ0F0dHIsIHN0ciwgRXhwcmVzc2lvbiwgc3RyXTtcbiAgZXhwb3J0IHR5cGUgRGVidWdnZXIgICAgICA9IFtPcGNvZGVzLkRlYnVnZ2VyLCBDb3JlLkV2YWxJbmZvXTtcbiAgZXhwb3J0IHR5cGUgQ2xpZW50U2lkZSAgICA9IFtPcGNvZGVzLkNsaWVudFNpZGVTdGF0ZW1lbnQsIGFueV07XG5cbiAgZXhwb3J0IHR5cGUgU3RhdGVtZW50ID1cbiAgICAgIFRleHRcbiAgICB8IEFwcGVuZFxuICAgIHwgQ29tbWVudFxuICAgIHwgTW9kaWZpZXJcbiAgICB8IEJsb2NrXG4gICAgfCBDb21wb25lbnRcbiAgICB8IE9wZW5FbGVtZW50XG4gICAgfCBTcGxhdEVsZW1lbnRcbiAgICB8IEZsdXNoRWxlbWVudFxuICAgIHwgQ2xvc2VFbGVtZW50XG4gICAgfCBTdGF0aWNBdHRyXG4gICAgfCBEeW5hbWljQXR0clxuICAgIHwgQXR0clNwbGF0XG4gICAgfCBZaWVsZFxuICAgIHwgUGFydGlhbFxuICAgIHwgU3RhdGljQXJnXG4gICAgfCBEeW5hbWljQXJnXG4gICAgfCBUcnVzdGluZ0F0dHJcbiAgICB8IERlYnVnZ2VyXG4gICAgfCBDbGllbnRTaWRlXG4gICAgO1xuXG4gIGV4cG9ydCB0eXBlIEF0dHJpYnV0ZSA9XG4gICAgICBTdGF0ZW1lbnRzLlN0YXRpY0F0dHJcbiAgICB8IFN0YXRlbWVudHMuRHluYW1pY0F0dHJcbiAgICB8IFN0YXRlbWVudHMuQXR0clNwbGF0XG4gICAgO1xuXG4gIGV4cG9ydCB0eXBlIEFyZ3VtZW50ID1cbiAgICAgIFN0YXRlbWVudHMuU3RhdGljQXJnXG4gICAgfCBTdGF0ZW1lbnRzLkR5bmFtaWNBcmdcbiAgICA7XG5cbiAgZXhwb3J0IHR5cGUgUGFyYW1ldGVyID0gQXR0cmlidXRlIHwgQXJndW1lbnQ7XG59XG5cbmV4cG9ydCB0eXBlIFN0YXRlbWVudCA9IFN0YXRlbWVudHMuU3RhdGVtZW50O1xuXG4vKipcbiAqIEEgSlNPTiBvYmplY3Qgb2Ygc3RhdGljIGNvbXBpbGUgdGltZSBtZXRhIGZvciB0aGUgdGVtcGxhdGUuXG4gKi9cbmV4cG9ydCBpbnRlcmZhY2UgVGVtcGxhdGVNZXRhIHtcbiAgW2tleTogc3RyaW5nXTogT3BhcXVlO1xuICBtb2R1bGVOYW1lPzogc3RyaW5nO1xufVxuXG4vKipcbiAqIEEgSlNPTiBvYmplY3QgdGhhdCB0aGUgQmxvY2sgd2FzIHNlcmlhbGl6ZWQgaW50by5cbiAqL1xuZXhwb3J0IGludGVyZmFjZSBTZXJpYWxpemVkQmxvY2sge1xuICBzdGF0ZW1lbnRzOiBTdGF0ZW1lbnRzLlN0YXRlbWVudFtdO1xufVxuXG5leHBvcnQgaW50ZXJmYWNlIFNlcmlhbGl6ZWRJbmxpbmVCbG9jayBleHRlbmRzIFNlcmlhbGl6ZWRCbG9jayB7XG4gIHBhcmFtZXRlcnM6IG51bWJlcltdO1xufVxuXG4vKipcbiAqIEEgSlNPTiBvYmplY3QgdGhhdCB0aGUgY29tcGlsZWQgVGVtcGxhdGVCbG9jayB3YXMgc2VyaWFsaXplZCBpbnRvLlxuICovXG5leHBvcnQgaW50ZXJmYWNlIFNlcmlhbGl6ZWRUZW1wbGF0ZUJsb2NrIGV4dGVuZHMgU2VyaWFsaXplZEJsb2NrIHtcbiAgc3ltYm9sczogc3RyaW5nW107XG4gIGhhc0V2YWw6IGJvb2xlYW47XG59XG5cbi8qKlxuICogQSBKU09OIG9iamVjdCB0aGF0IHRoZSBjb21waWxlZCBUZW1wbGF0ZSB3YXMgc2VyaWFsaXplZCBpbnRvLlxuICovXG5leHBvcnQgaW50ZXJmYWNlIFNlcmlhbGl6ZWRUZW1wbGF0ZTxUIGV4dGVuZHMgVGVtcGxhdGVNZXRhPiB7XG4gIGJsb2NrOiBTZXJpYWxpemVkVGVtcGxhdGVCbG9jaztcbiAgbWV0YTogVDtcbn1cblxuLyoqXG4gKiBBIHN0cmluZyBvZiBKU09OIGNvbnRhaW5pbmcgYSBTZXJpYWxpemVkVGVtcGxhdGVCbG9ja1xuICovXG5leHBvcnQgdHlwZSBTZXJpYWxpemVkVGVtcGxhdGVCbG9ja0pTT04gPSBzdHJpbmc7XG5cbi8qKlxuICogQSBKU09OIG9iamVjdCBjb250YWluaW5nIHRoZSBTZXJpYWxpemVkVGVtcGxhdGVCbG9jayBhcyBKU09OIGFuZCBUZW1wbGF0ZU1ldGEuXG4gKi9cbmV4cG9ydCBpbnRlcmZhY2UgU2VyaWFsaXplZFRlbXBsYXRlV2l0aExhenlCbG9jazxUZW1wbGF0ZU1ldGE+IHtcbiAgaWQ/OiBPcHRpb248c3RyaW5nPjtcbiAgYmxvY2s6IFNlcmlhbGl6ZWRUZW1wbGF0ZUJsb2NrSlNPTjtcbiAgbWV0YTogVGVtcGxhdGVNZXRhO1xufVxuXG4vKipcbiAqIEEgc3RyaW5nIG9mIEphdmFzY3JpcHQgY29udGFpbmluZyBhIFNlcmlhbGl6ZWRUZW1wbGF0ZVdpdGhMYXp5QmxvY2sgdG8gYmVcbiAqIGNvbmNhdGVuYXRlZCBpbnRvIGEgSmF2YXNjcmlwdCBtb2R1bGUuXG4gKi9cbmV4cG9ydCB0eXBlIFRlbXBsYXRlSmF2YXNjcmlwdCA9IHN0cmluZztcblxuLy8gU3RhdGVtZW50c1xuZXhwb3J0IGNvbnN0IGlzTW9kaWZpZXIgICAgICAgPSBpczxTdGF0ZW1lbnRzLk1vZGlmaWVyPihPcGNvZGVzLk1vZGlmaWVyKTtcbmV4cG9ydCBjb25zdCBpc0ZsdXNoRWxlbWVudCAgID0gaXM8U3RhdGVtZW50cy5GbHVzaEVsZW1lbnQ+KE9wY29kZXMuRmx1c2hFbGVtZW50KTtcblxuZXhwb3J0IGZ1bmN0aW9uIGlzQXR0cmlidXRlKHZhbDogU3RhdGVtZW50KTogdmFsIGlzIFN0YXRlbWVudHMuQXR0cmlidXRlIHtcbiAgcmV0dXJuIHZhbFswXSA9PT0gT3Bjb2Rlcy5TdGF0aWNBdHRyIHx8IHZhbFswXSA9PT0gT3Bjb2Rlcy5EeW5hbWljQXR0ciB8fCB2YWxbMF0gPT09IE9wY29kZXMuVHJ1c3RpbmdBdHRyO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gaXNBcmd1bWVudCh2YWw6IFN0YXRlbWVudCk6IHZhbCBpcyBTdGF0ZW1lbnRzLkFyZ3VtZW50IHtcbiAgcmV0dXJuIHZhbFswXSA9PT0gT3Bjb2Rlcy5TdGF0aWNBcmcgfHwgdmFsWzBdID09PSBPcGNvZGVzLkR5bmFtaWNBcmc7XG59XG5cbi8vIEV4cHJlc3Npb25zXG5leHBvcnQgY29uc3QgaXNHZXQgICAgICAgICAgICA9IGlzPEV4cHJlc3Npb25zLkdldD4oT3Bjb2Rlcy5HZXQpO1xuZXhwb3J0IGNvbnN0IGlzTWF5YmVMb2NhbCAgICAgPSBpczxFeHByZXNzaW9ucy5NYXliZUxvY2FsPihPcGNvZGVzLk1heWJlTG9jYWwpO1xuIl19